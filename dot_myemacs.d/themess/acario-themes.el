;;; acario-themes.el --- Gagbo personal color themes
;;
;; Copyright (C) 2019 Gerry Agbobada

;; Author: gagbo <gagbobada+git@gmail.com>
;; URL: https://framagit.org/gagbo/acario-theme
;; Keywords: lisp, faces
;; Version: 0.1.0
;; Package-Requires: ((emacs "24"))

;;; Commentary:
;;
;; Acario theme is a custom theme for Emacs focused on expressive
;; colors (mid to high saturation) and good contrast.
;; This file provides some utilities to load and switch themes.

;;; Credits:

;; Nasser Alshammari
;; https://github.com/nashamri/spacemacs-theme
;; I used this theme as a base for how to make an Emacs color theme

;; Daniel Berg
;; https://github.com/srcery-colors/srcery-emacs
;; Used as a reference implementation

;; Samuel Walladge
;; https://github.com/swalladge/paper.vim
;; Base inpiration for the light version

;;; Code:
;;;; Version checking and custom font variables
(unless (>= emacs-major-version 24)
  (error "The Acario theme requires Emacs 24 or later!"))

(defvar acario-themes-current-style nil)

(defgroup acario nil
  "Acario options."
  :group 'faces)

(defcustom acario-org-height t
  "Use varying text heights for org headings."
  :type 'boolean
  :group 'acario)

(defcustom acario-invert-matches nil
  "Use inverse video for search matches."
  :type 'boolean
  :group 'acario)

(defcustom acario-invert-region nil
  "Use inverse video for region."
  :type 'boolean
  :group 'acario)

(defcustom acario-transparent-background nil
  "Sets black background color to nil in terminal."
  :type 'boolean
  :group 'acario)

(defcustom acario-theme-custom-colors nil
  "Specify a list of custom colors."
  :type 'alist
  :group 'acario)

(defun create-acario-theme (variant theme-name)
  (let (
	(tc-class     '((class color) (min-colors 257)))
	(256-class '((class color) (min-colors 89 )))
	;;                                       ~~ Dark ~~ ~~ Light ~~
	;; generic
	(fg               (if (eq variant 'dark) "#CEDBE5" "#000000"))
	(256-fg          (if (eq variant 'dark) "color-152" "color-16"))
	(bg               (if (eq variant 'dark) "#0D0E16" "#EEEEEE"))
	(256-bg          (if (eq variant 'dark)
			      (if acario-transparent-background nil "color-232")
			     (if acario-transparent-background nil "color-255")))
	(sel              (if (eq variant 'dark) "#175178" "#D7D700"))
	(256-sel         (if (eq variant 'dark) "color-24" "color-184"))

	;; Term colors
	(term-bg          (if (eq variant 'dark) "#0F1019" "#C6C6C6"))
	(256-term-bg     (if (eq variant 'dark) "color-234" "color-251"))
	(red              (if (eq variant 'dark) "#D83441" "#D70000"))
	(256-red         (if (eq variant 'dark) "color-167" "color-160"))
	(green            (if (eq variant 'dark) "#79D836" "#005F00"))
	(256-green       (if (eq variant 'dark) "color-113" "color-22"))
	(yellow           (if (eq variant 'dark) "#D8B941" "#D7AF00"))
	(256-yellow      (if (eq variant 'dark) "color-179" "color-178"))
	(blue             (if (eq variant 'dark) "#3679D8"  "#0000D7"))
	(256-blue        (if (eq variant 'dark) "color-68"  "color-20"))
	(magenta          (if (eq variant 'dark) "#8041D8"  "#D70087"))
	(256-magenta     (if (eq variant 'dark) "color-98"  "color-162"))
	(cyan             (if (eq variant 'dark) "#36D8BD"  "#005F87"))
	(256-cyan        (if (eq variant 'dark) "color-79"  "color-24"))
	(term-fg          (if (eq variant 'dark) "#959EA5" "#000000"))
	(256-term-fg     (if (eq variant 'dark) "color-109" "color-16"))
	(br-term-bg       (if (eq variant 'dark) "#2D304C" "#EEEEEE"))
	(256-br-term-bg  (if (eq variant 'dark) "color-240" "color-255"))
	(br-red           (if (eq variant 'dark) "#FF7266" "#AF5F5F"))
	(256-br-red      (if (eq variant 'dark) "color-203" "color-131"))
	(br-green         (if (eq variant 'dark) "#B2FF66" "#5FAF5F"))
	(256-br-green    (if (eq variant 'dark) "color-155" "color-71"))
	(br-yellow        (if (eq variant 'dark) "#FFDF66" "#AFAF5F"))
	(256-br-yellow   (if (eq variant 'dark) "color-221" "color-143"))
	(br-blue          (if (eq variant 'dark) "#66A5FF" "#5F5FAF"))
	(256-br-blue     (if (eq variant 'dark) "color-75"  "color-61"))
	(br-magenta       (if (eq variant 'dark) "#9866FF"  "#875FAF"))
	(256-br-magenta  (if (eq variant 'dark) "color-99"  "color-97"))
	(br-cyan          (if (eq variant 'dark) "#66FFD8"  "#5F87AF"))
	(256-br-cyan     (if (eq variant 'dark) "color-86"  "color-67"))
	(br-term-fg       (if (eq variant 'dark) "#E5F4FF" "#3A3A3A"))
	(256-br-term-fg  (if (eq variant 'dark) "color-195" "color-237"))

	;; Additional colors
	(orange           (if (eq variant 'dark) "#D85F00" "#D85F00"))
	(256-orange      (if (eq variant 'dark) "#D85F00" "#D75F00"))
	(br-orange        (if (eq variant 'dark) "#FF8700" "#FF6E00"))
	(256-br-orange   (if (eq variant 'dark) "#FF8700" "#FF5F00"))
	(violet           (if (eq variant 'dark) "#8700AF" "#8700AF"))
	(256-violet      (if (eq variant 'dark) "#8700AF" "#8700AF"))
	(br-violet        (if (eq variant 'dark) "#C400FF" "#C400FF"))
	(256-br-violet   (if (eq variant 'dark) "#D700FF" "#D700FF"))
	(aqua             (if (eq variant 'dark) "#2D9574" "#2D9574"))
	(256-aqua        (if (eq variant 'dark) "#00875F" "#00875F"))
	(br-aqua          (if (eq variant 'dark) "#4DFFC4" "#4DFFC4"))
	(256-br-aqua     (if (eq variant 'dark) "#5FFFD7" "#5FFFD7"))

	;; bg-like color variants
	(bg-red           (if (eq variant 'dark) "#5F0000"  "#FFD7D7"))
	(256-bg-red      (if (eq variant 'dark) "#5F0000"  "#FFD7D7"))
	(bg-green         (if (eq variant 'dark) "#005F00"  "#D7FFD7"))
	(256-bg-green    (if (eq variant 'dark) "#005F00"  "#D7FFD7"))
	(bg-yellow        (if (eq variant 'dark) "#5F5F00"  "#FFFFD7"))
	(256-bg-yellow   (if (eq variant 'dark) "#5F5F00"  "#FFFFD7"))
	(bg-blue          (if (eq variant 'dark) "#00005F"  "#D7D7FF"))
	(256-bg-blue     (if (eq variant 'dark) "#00005F"  "#D7D7FF"))
	(bg-magenta       (if (eq variant 'dark) "#5F005F"  "#FFD7FF"))
	(256-bg-magenta  (if (eq variant 'dark) "#5F005F"  "#FFD7FF"))
	(bg-cyan          (if (eq variant 'dark) "#005F5F"  "#D7FFFF"))
	(256-bg-cyan     (if (eq variant 'dark) "#005F5F"  "#D7FFFF"))
	(bg-orange        (if (eq variant 'dark) "#5F5F00"  "#FFEED7"))
	(256-bg-orange   (if (eq variant 'dark) "#5F5F00"  "#D7FFFF"))
	(bg-violet        (if (eq variant 'dark) "#5F0087"  "#EED7FF"))
	(256-bg-violet   (if (eq variant 'dark) "#5F0087"  "#D7FFFF"))
	(bg-aqua          (if (eq variant 'dark) "#005F87"  "#D7EEFF"))
	(256-bg-aqua     (if (eq variant 'dark) "#005F87"  "#D7FFFF"))

	;; Grayscale (goes from bg -> fg)
	(gray-hardbg      (if (eq variant 'dark) "#599969" "#FFFFFF")) ;; #121212
	(256-gray-hardbg (if (eq variant 'dark) "#121212" "#FFFFFF"))
	(gray1            (if (eq variant 'dark) "#1E1E33" "#C6C6C6"))
	(256-gray1       (if (eq variant 'dark) "#262626" "#C6C6C6"))
	(gray2            (if (eq variant 'dark) "#303030" "#949494"))
	(256-gray2       (if (eq variant 'dark) "#303030" "#949494"))
	(gray3            (if (eq variant 'dark) "#3A3A3A" "#808080"))
	(256-gray3       (if (eq variant 'dark) "#3A3A3A" "#808080"))
	(gray4            (if (eq variant 'dark) "#444444" "#626262"))
	(256-gray4       (if (eq variant 'dark) "#444444" "#626262"))
	(gray5            (if (eq variant 'dark) "#4E4E4E" "#4E4E4E"))
	(256-gray5       (if (eq variant 'dark) "#4E4E4E" "#4E4E4E"))
	(gray-hardfg      (if (eq variant 'dark) "#FFFFFF" "#000000"))
	(256-gray-hardfg (if (eq variant 'dark) "#FFFFFF" "#000000"))
	)

    (cl-loop for (var . val) in acario-theme-custom-colors
	     do (set var val))

    (custom-theme-set-faces
     theme-name

;;;;; Basics
     `(cursor ((,tc-class (:background ,term-fg :foreground ,term-bg))
	       (,256-class (:background ,256-term-fg :foreground ,256-term-bg))))
     `(custom-button ((,tc-class (:background ,term-bg :foreground ,br-term-fg :box (:line-width 2 :style released-button)))
		      (,256-class (:background ,256-term-bg :foreground ,256-br-term-fg :box (:line-width 2 :style released-button)))))
     `(default ((,tc-class (:background ,bg :foreground ,fg))
		(,256-class (:background ,256-bg :foreground ,256-fg))))
     `(default-italic ((,tc-class (:italic t))
		       (,256-class (:italic t))))
     `(error ((,tc-class (:foreground ,red :background ,bg :weight bold))
	      (,256-class (:foreground ,256-red :background ,256-bg :weight bold))))
     `(eval-sexp-fu-flash ((,tc-class (:background ,green))
			   (,256-class (:background ,256-green))))
     `(eval-sexp-fu-flash-error ((,tc-class (:background ,red))
				 (,256-class (:background ,256-red))))
     `(font-lock-builtin-face ((,tc-class (:foreground ,blue :background ,bg))
			       (,256-class (:foreground ,256-blue :background ,256-bg))))
     `(font-lock-comment-face ((,tc-class (:foreground ,term-fg :background ,bg :italic))
			       (,256-class (:foreground ,256-term-fg :background ,256-bg :italic))))
     `(font-lock-constant-face ((,tc-class (:foreground ,br-magenta :background ,bg))
				(,256-class (:foreground ,256-br-magenta :background ,256-bg))))
     `(font-lock-reference-face ((,tc-class (:foreground ,br-blue :background ,bg))
				 (,256-class (:foreground ,256-br-blue :background ,256-bg))))
     `(font-lock-doc-face ((,tc-class (:foreground ,green :background ,bg))
			   (,256-class (:foreground ,256-green :background ,256-bg))))
     `(font-lock-function-name-face ((,tc-class (:foreground ,yellow :background ,bg))
				     (,256-class (:foreground ,256-yellow :background ,256-bg))))
     `(font-lock-keyword-face ((,tc-class (:foreground ,red :background ,bg))
			       (,256-class (:foreground ,256-red :background ,256-bg))))
     `(font-lock-negation-char-face ((,tc-class (:foreground ,br-magenta :background ,bg))
				     (,256-class (:foreground ,256-br-magenta :background ,256-bg))))
     `(font-lock-preprocessor-face ((,tc-class (:foreground ,yellow :background ,bg))
				    (,256-class (:foreground ,256-yellow :background ,256-bg))))
     `(font-lock-string-face ((,tc-class (:foreground ,br-green :background ,bg))
			      (,256-class (:foreground ,256-br-green :background ,256-bg))))
     `(font-lock-type-face ((,tc-class (:foreground ,br-blue :background ,bg))
			    (,256-class (:foreground ,256-br-blue :background ,256-bg))))
     `(font-lock-variable-name-face ((,tc-class (:foreground ,cyan :background ,bg))
				     (,256-class (:foreground ,256-cyan :background ,256-bg))))
     `(font-lock-warning-face ((,tc-class (:foreground ,br-orange :background ,bg))
			       (,256-class (:foreground ,256-br-orange :background ,256-bg))))
     `(fringe ((,tc-class (:foreground ,br-term-fg :background ,bg))
	       (,256-class (:foreground ,256-br-term-fg :background ,256-bg))))
     `(header-line ((,tc-class (:background ,bg))
		    (,256-class (:background ,256-bg))))
     `(highlight ((,tc-class ,(if acario-invert-matches `(:inverse-video t) `(:background ,sel :weight bold)))
		  (,256-class ,(if acario-invert-matches `(:inverse-video t) `(:background ,256-sel :weight bold)))))
     `(hl-line ((,tc-class (:background ,gray1))
		(,256-class (:background ,256-gray1))))
     `(isearch ((,tc-class ,(if acario-invert-matches
			     `(:inverse-video t :underline t :weight bold)
			   `(:underline t :background ,bg-blue :foreground ,fg :weight bold)))
		(,256-class ,(if acario-invert-matches
				  `(:inverse-video t :underline t :weight bold)
				`(:underline t :background ,bg-blue :foreground ,fg :weight bold)))))
     `(isearch-fail ((,tc-class (:foreground ,red))
		     (,256-class (:foreground ,256-red))))
     `(lazy-highlight ((,tc-class ,(if acario-invert-matches
				    `(:inverse-video t)
				  `(:background ,bg-cyan :foreground ,fg :weight bold)))
		       (,256-class ,(if acario-invert-matches
					 `(:inverse-video t)
				       `(:background ,bg-cyan :foreground ,fg :weight bold)))))
     `(link ((,tc-class (:inherit font-lock-comment-face :underline t))
	     (,256-class (:inherit font-lock-comment-face :underline t))))
     `(link-visited ((,tc-class (:inherit font-lock-comment-face :underline t))
		     (,256-class (:inherit font-lock-comment-face :underline t))))
     `(match ((,tc-class ,(if acario-invert-matches
			   `(:inverse-video t)
			 `(:background ,br-term-bg :weight bold)))
	      (,256-class ,(if acario-invert-matches
				`(:inverse-video t)
			      `(:background ,br-term-bg :weight bold)))))
     `(minibuffer-prompt ((,tc-class (:weight bold :foreground ,yellow))
			  (,256-class (:weight bold :foreground ,256-yellow))))
     `(page-break-lines ((,tc-class (:foreground ,gray3))
			 (,256-class (:foreground ,256-gray3))))
     `(region ((,tc-class ,(if acario-invert-region
			    `(:inverse-video t)
			  `(:background ,gray-hardbg :foreground ,gray-hardfg)))
	       (,256-class ,(if acario-invert-region
				 `(:inverse-video t)
			       `(:background ,gray-hardbg :foreground ,gray-hardfg)))))
     `(secondary-selection ((,tc-class (:background ,gray2))
			    (,256-class (:background ,256-gray2))))
     `(success ((,tc-class (:foreground ,green))
		(,256-class (:foreground ,256-green))))
     `(tooltip ((,tc-class (:background ,bg-blue :foreground ,fg :bold nil :italic nil :underline nil))
		(,256-class (:background ,256-bg-blue :foreground ,256-fg :bold nil :italic nil :underline nil))))
     `(vertical-border ((,tc-class (:foreground ,magenta))
			(,256-class (:foreground ,256-magenta))))
     `(warning ((,tc-class (:foreground ,br-orange))
		(,256-class (:foreground ,256-br-orange))))
     `(tool-bar ((,tc-class (:foreground ,fg))
		 (,256-class (:foreground ,256-fg))))

;;;;; ahs
     `(ahs-face ((,tc-class (:background ,magenta))
		 (,256-class (:background ,256-magenta))))
     `(ahs-plugin-whole-buffer-face ((,tc-class (:background ,yellow :foreground ,term-bg))
				     (,256-class (:background ,256-yellow :foreground ,256-term-bg))))
     `(ahs-edit-mode-face ((,tc-class (:background ,br-red :foreground ,br-term-fg))
			   (,256-class (:background ,256-br-red :foreground ,256-br-term-fg))))

;;;;; anzu-mode
     `(anzu-mode-line ((,tc-class (:foreground ,yellow :weight bold))
		       (,256-class (:foreground ,256-yellow :weight bold))))

;;;;; auto-complete
     `(ac-completion-face ((,tc-class (:foreground ,fg :background ,br-term-bg))
			   (,256-class (:foreground ,256-fg :background ,256-br-term-bg))))

;;;;; avy
     `(avy-lead-face ((,tc-class (:background ,br-term-bg :foreground ,br-magenta))
		      (,256-class (:background ,256-br-term-bg :foreground ,256-br-magenta))))
     `(avy-lead-face-0 ((,tc-class (:background ,br-term-bg :foreground ,br-yellow))
			(,256-class (:background ,256-br-term-bg :foreground ,256-br-yellow))))
     `(avy-lead-face-1 ((,tc-class (:background ,br-term-bg :foreground ,br-green))
			(,256-class (:background ,256-br-term-bg :foreground ,256-br-green))))
     `(avy-lead-face-2 ((,tc-class (:background ,br-term-bg :foreground ,br-blue))
			(,256-class (:background ,256-br-term-bg :foreground ,256-br-blue))))


;;;;; cider
     `(cider-enlightened ((,tc-class (:background nil :box (:color ,yellow :line-width -1 :style nil) :foreground ,yellow))
			  (,256-class (:background nil :box (:color ,256-yellow :line-width -1 :style nil) :foreground ,256-yellow))))
     `(cider-enlightened-face ((,tc-class (:background nil :box (:color ,term-fg :line-width -1 :style nil) :foreground ,blue))
			       (,256-class (:background nil :box (:color ,256-term-fg :line-width -1 :style nil) :foreground ,256-blue))))
     `(cider-enlightened-local ((,tc-class (:foreground ,br-yellow))
				(,256-class (:foreground ,256-br-yellow))))
     `(cider-instrumented-face ((,tc-class (:background nil :box (:color ,red :line-width -1 :style nil) :foreground ,red))
				(,256-class (:background nil :box (:color ,256-red :line-width -1 :style nil) :foreground ,256-red))))
     `(cider-result-overlay-face ((,tc-class (:background nil :box (:color ,blue :line-width -1 :style nil) :foreground ,blue))
				  (,256-class (:background nil :box (:color ,256-blue :line-width -1 :style nil) :foreground ,256-blue))))
     `(cider-test-error-face ((,tc-class (:background ,br-orange :foreground ,term-bg))
			      (,256-class (:background ,256-br-orange :foreground ,256-term-bg))))
     `(cider-test-failure-face ((,tc-class (:background ,red :foreground ,fg))
				(,256-class (:background ,256-red :foreground ,256-fg))))
     `(cider-test-success-face ((,tc-class (:background ,green :foreground ,term-bg))
				(,256-class (:background ,256-green :foreground ,256-term-bg))))
     `(cider-traced-face ((,tc-class :box (:color ,cyan :line-width -1 :style nil))
			  (,256-class :box (:color ,256-cyan :line-width -1 :style nil))))
     `(cider-fringe-good-face ((,tc-class (:foreground ,green))
			       (,256-class (:foreground ,256-green))))
     `(cider-fragile-button-face ((,tc-class :foreground ,orange :box (:style released-button))
				  (,256-class :foreground ,256-orange :box (:style released-button))))
     `(cider-stacktrace-promoted-button-face ((,tc-class :foreground ,red :box (:style released-button))
					      (,256-class :foreground ,256-red :box (:style released-button))))
     `(cider-stacktrace-suppressed-button-face ((,tc-class :foreground ,term-fg :box (:style pressed-button))
						(,256-class :foreground ,256-term-fg :box (:style pressed-button))))
     `(cider-enlightened-local-face ((,tc-class (:foreground ,yellow :weight bold))
				     (,256-class (:foreground ,256-yellow :weight bold))))
     `(cider-deprecated-face ((,tc-class  (:foreground ,br-yellow :underline t))
			      (,256-class  (:foreground ,256-br-yellow :underline t))))
     `(cider-debug-code-overlay-face ((,tc-class (:background ,bg-blue :foreground ,term-fg))
				      (,256-class (:background ,256-bg-blue :foreground ,256-term-fg))))
     `(cider-docview-table-border-face ((,tc-class (:foreground ,term-fg))
					(,256-class (:foreground ,256-term-fg))))

;;;;; clojure
     `(clojure-keyword-face ((,tc-class (:foreground ,blue))
			     (,256-class (:foreground ,256-blue))))

;;;;; company
     `(company-echo-common ((,tc-class (:background ,fg :foreground ,term-bg))
			    (,256-class (:background ,256-fg :foreground ,256-term-bg))))
     `(company-preview ((,tc-class (:background ,gray1 :foreground ,fg))
			(,256-class (:background ,256-gray1 :foreground ,256-fg))))
     `(company-preview-common ((,tc-class (:background ,gray1 :foreground ,fg))
			       (,256-class (:background ,256-gray1 :foreground ,256-fg))))
     `(company-preview-search ((,tc-class (:inherit match))
			       (,256-class (:inherit match))))
     `(company-scrollbar-bg ((,tc-class (:background ,gray1))
			     (,256-class (:background ,256-gray1))))
     `(company-scrollbar-fg ((,tc-class (:background ,term-fg))
			     (,256-class (:background ,256-term-fg))))
     `(company-template-field ((,tc-class (:inherit region))
			       (,256-class (:inherit region))))
     `(company-tooltip ((,tc-class (:background ,gray1 :foreground ,term-fg))
			(,256-class (:background ,256-gray1 :foreground ,256-term-fg))))
     `(company-tooltip-annotation ((,tc-class (:foreground ,red))
				   (,256-class (:foreground ,256-red))))
     `(company-tooltip-common ((,tc-class (:background ,gray1 :foreground ,fg))
			       (,256-class (:background ,256-gray1 :foreground ,256-fg))))
     `(company-tooltip-common-selection ((,tc-class (:foreground ,br-magenta))
					 (,256-class (:foreground ,256-br-magenta))))
     `(company-tooltip-mouse ((,tc-class (:inherit highlight))
			      (,256-class (:inherit highlight))))
     `(company-tooltip-search ((,tc-class (:inherit match))
			       (,256-class (:inherit match))))
     `(company-tooltip-selection ((,tc-class (:foreground ,magenta))
				  (,256-class (:foreground ,256-magenta))))

;;;;; racer
     `(racer-tooltip ((,tc-class (:foreground ,fg :background ,gray1))
		      (,256-class (:foreground ,256-fg :background ,256-gray1))))
     `(racer-help-heading-face ((,tc-class (:foreground ,fg :weight bold))
				(,256-class (:foreground ,256-fg :weight bold))))

;;;;; rust
     `(rust-builtin-formatting-macro-face ((,tc-class (:foreground ,blue))
					   (,256-class (:foreground ,256-blue))))
     `(rust-question-mark-face ((,tc-class (:foreground ,blue :weight bold))
				(,256-class (:foreground ,256-blue :weight bold))))
     `(rust-string-interpolation-face ((,tc-class (:foreground ,br-green :italic t))
				       (,256-class (:foreground ,256-br-green :italic t))))
     `(rust-unsafe-face ((,tc-class (:foreground ,br-orange))
			 (,256-class (:foreground ,256-br-orange))))

;;;;; diff
     `(diff-added ((,tc-class (:background nil :foreground ,green))
		   (,256-class (:background nil :foreground ,256-green))))
     `(diff-changed ((,tc-class (:background nil :foreground ,red))
		     (,256-class (:background nil :foreground ,256-red))))
     `(diff-header ((,tc-class (:background ,br-term-bg :foreground ,yellow))
		    (,256-class (:background ,256-br-term-bg :foreground ,256-yellow))))
     `(diff-indicator-added ((,tc-class (:background nil :foreground ,green))
			     (,256-class (:background nil :foreground ,256-green))))
     `(diff-indicator-changed ((,tc-class (:background nil :foreground ,red))
			       (,256-class (:background nil :foreground ,256-red))))
     `(diff-indicator-removed ((,tc-class (:background nil :foreground ,red))
			       (,256-class (:background nil :foreground ,256-red))))
     `(diff-refine-added ((,tc-class (:background ,green :foreground ,term-bg))
			  (,256-class (:background ,256-green :foreground ,256-term-bg))))
     `(diff-refine-changed ((,tc-class (:background ,blue :foreground ,fg))
			    (,256-class (:background ,256-blue :foreground ,256-fg))))
     `(diff-refine-removed ((,tc-class (:background ,red :foreground ,fg))
			    (,256-class (:background ,256-red :foreground ,256-fg))))
     `(diff-removed ((,tc-class (:background nil :foreground ,red))
		     (,256-class (:background nil :foreground ,256-red))))

;;;;; diff-hl
     `(diff-hl-change ((,tc-class (:foreground ,blue))
		       (,256-class (:foreground ,256-blue))))
     `(diff-hl-delete ((,tc-class (:foreground ,red))
		       (,256-class (:foreground ,256-red))))
     `(diff-hl-insert ((,tc-class (:foreground ,green))
		       (,256-class (:foreground ,256-green))))

;;;;; dired
     `(dired-directory ((,tc-class (:foreground ,blue :background ,term-bg))
			(,256-class (:foreground ,256-blue :background ,256-term-bg))))
     `(dired-flagged ((,tc-class (:foreground ,red))
		      (,256-class (:foreground ,256-red))))
     `(dired-header ((,tc-class (:foreground ,green :weight bold))
		     (,256-class (:foreground ,256-green :weight bold))))
     `(dired-ignored ((,tc-class (:inherit shadow))
		      (,256-class (:inherit shadow))))
     `(dired-mark ((,tc-class (:foreground ,green :weight bold))
		   (,256-class (:foreground ,256-green :weight bold))))
     `(dired-marked ((,tc-class (:foreground ,magenta :weight bold))
		     (,256-class (:foreground ,256-magenta :weight bold))))
     `(dired-perm-write ((,tc-class (:foreground ,fg :underline t))
			 (,256-class (:foreground ,256-fg :underline t))))
     `(dired-symlink ((,tc-class (:foreground ,cyan :background ,term-bg :weight bold))
		      (,256-class (:foreground ,256-cyan :background ,256-term-bg :weight bold))))
     `(dired-warning ((,tc-class (:foreground ,br-orange))
		      (,256-class (:foreground ,256-br-orange))))
     `(diredp-date-time ((,tc-class (:foreground ,blue))
			 (,256-class (:foreground ,256-blue))))
     `(diredp-number ((,tc-class (:foreground ,br-green))
		      (,256-class (:foreground ,256-br-green))))
     `(diredp-file-name ((,tc-class (:foreground ,fg))
			 (,256-class (:foreground ,256-fg))))
     `(diredp-file-suffix ((,tc-class (:foreground ,br-blue))
			   (,256-class (:foreground ,256-br-blue))))
     `(diredp-dir-heading ((,tc-class (:foreground ,fg :underline t))
			   (,256-class (:foreground ,256-fg :underline t))))
     `(diredp-dir-heading ((,tc-class (:foreground ,fg :underline t))
			   (,256-class (:foreground ,256-fg :underline t))))
     `(diredp-dir-priv ((,tc-class (:foreground ,fg))
			(,256-class (:foreground ,256-fg))))
     `(diredp-read-priv ((,tc-class (:foreground ,br-yellow))
			 (,256-class (:foreground ,256-br-yellow))))
     `(diredp-write-priv ((,tc-class (:foreground ,br-red))
			  (,256-class (:foreground ,256-br-red))))
     `(diredp-write-priv ((,tc-class (:foreground ,br-red))
			  (,256-class (:foreground ,256-br-red))))
     `(diredp-dir-name ((,tc-class (:foreground ,fg))
			(,256-class (:foreground ,256-fg))))
     `(diredp-exec-priv ((,tc-class (:foreground ,br-green))
			 (,256-class (:foreground ,256-br-green))))
     `(diredp-symlink ((,tc-class (:foreground ,br-cyan))
		       (,256-class (:foreground ,256-br-cyan))))
     `(diredp-tagged-autofile-name ((,tc-class (:foreground ,fg :background ,magenta))
				    (,256-class (:foreground ,256-fg :background ,256-magenta))))
     `(diredp-no-priv ((,tc-class (:foreground ,term-fg))
		       (,256-class (:foreground ,256-term-fg))))
     `(diredp-flag-mark ((,tc-class (:background ,green :foreground ,term-bg))
			 (,256-class (:background ,256-green :foreground ,256-term-bg))))
     `(diredp-flag-mark-line ((,tc-class (:background ,green :foreground ,term-bg))
			      (,256-class (:background ,256-green :foreground ,256-term-bg))))
     `(diredp-autofile-name ((,tc-class (:background ,blue :foreground ,fg))
			     (,256-class (:background ,256-blue :foreground ,256-fg))))
     `(diredp-deletion ((,tc-class (:background ,red :foreground ,fg))
			(,256-class (:background ,256-red :foreground ,256-fg))))
     `(diredp-ignored-file-name ((,tc-class (:foreground ,term-fg))
				 (,256-class (:foreground ,256-term-fg))))
     `(diredp-link-priv ((,tc-class (:foreground ,blue))
			 (,256-class (:foreground ,256-blue))))
     `(diredp-mode-line-marked ((,tc-class (:foreground ,magenta))
				(,256-class (:foreground ,256-magenta))))
     `(diredp-other-priv ((,tc-class (:foreground ,fg))
			  (,256-class (:foreground ,256-fg))))
     `(diredp-rare-priv ((,tc-class (:foreground ,fg))
			 (,256-class (:foreground ,256-fg))))

;;;;; ediff
     `(ediff-current-diff-A ((,tc-class (:background ,bg-red))
			     (,256-class (:background ,256-bg-red))))
     `(ediff-current-diff-Ancestor ((,tc-class (:background ,bg-cyan))
				    (,256-class (:background ,256-bg-cyan))))
     `(ediff-current-diff-B ((,tc-class (:background ,bg-green))
			     (,256-class (:background ,256-bg-green))))
     `(ediff-current-diff-C ((,tc-class (:background ,bg-blue))
			     (,256-class (:background ,256-bg-blue))))
     `(ediff-even-diff-A ((,tc-class (:background ,gray1))
			  (,256-class (:background ,256-gray1))))
     `(ediff-even-diff-Ancestor ((,tc-class (:background ,gray1))
				 (,256-class (:background ,256-gray1))))
     `(ediff-even-diff-B ((,tc-class (:background ,gray1))
			  (,256-class (:background ,256-gray1))))
     `(ediff-even-diff-C ((,tc-class (:background ,gray1))
			  (,256-class (:background ,256-gray1))))
     `(ediff-fine-diff-A ((,tc-class (:background ,red :weight bold))
			  (,256-class (:background ,256-red :weight bold))))
     `(ediff-fine-diff-Ancestor ((,tc-class (:background ,cyan :weight bold))
				 (,256-class (:background ,256-cyan :weight bold))))
     `(ediff-fine-diff-B ((,tc-class (:background ,green :weight bold))
			  (,256-class (:background ,256-green :weight bold))))
     `(ediff-fine-diff-C ((,tc-class (:background ,blue :weight bold))
			  (,256-class (:background ,256-blue :weight bold))))
     `(ediff-odd-diff-A ((,tc-class (:background ,gray2))
			 (,256-class (:background ,256-gray2))))
     `(ediff-odd-diff-Ancestor ((,tc-class (:background ,gray2))
				(,256-class (:background ,256-gray2))))
     `(ediff-odd-diff-B ((,tc-class (:background ,gray2))
			 (,256-class (:background ,256-gray2))))
     `(ediff-odd-diff-C ((,tc-class (:background ,gray2))
			 (,256-class (:background ,256-gray2))))

;;;;; ein
     `(ein:cell-input-area ((,tc-class (:background ,br-term-bg))
			    (,256-class (:background ,256-br-term-bg))))
     `(ein:cell-input-prompt ((,tc-class (:foreground ,green))
			      (,256-class (:foreground ,256-green))))
     `(ein:cell-output-prompt ((,tc-class (:foreground ,red))
			       (,256-class (:foreground ,256-red))))
     `(ein:notification-tab-normal ((,tc-class (:foreground ,red))
				    (,256-class (:foreground ,256-red))))
     `(ein:notification-tab-selected ((,tc-class (:foreground ,green :weight bold))
				      (,256-class (:foreground ,256-green :weight bold))))

;;;;;eldoc
     `(eldoc-highlight-function-argument ((,tc-class (:foreground ,yellow :weight bold))
					  (,256-class (:foreground ,256-yellow :weight bold))))

;;;;; enh-ruby
     `(enh-ruby-string-delimiter-face ((,tc-class (:foreground ,br-green))
				       (,256-class (:foreground ,256-br-green))))
     `(enh-ruby-op-face ((,tc-class (:background ,term-bg :foreground ,fg))
			 (,256-class (:background ,256-term-bg :foreground ,256-fg))))

;;;;; erc
     `(erc-input-face ((,tc-class (:foreground ,yellow))
		       (,256-class (:foreground ,256-yellow))))
     `(erc-my-nick-face ((,tc-class (:foreground ,red))
			 (,256-class (:foreground ,256-red))))
     `(erc-nick-default-face ((,tc-class (:foreground ,red))
			      (,256-class (:foreground ,256-red))))
     `(erc-nick-prefix-face ((,tc-class (:foreground ,yellow))
			     (,256-class (:foreground ,256-yellow))))
     `(erc-notice-face ((,tc-class (:foreground ,br-green))
			(,256-class (:foreground ,256-br-green))))
     `(erc-prompt-face ((,tc-class (:foreground ,yellow :weight bold))
			(,256-class (:foreground ,256-yellow :weight bold))))
     `(erc-timestamp-face ((,tc-class (:foreground ,red))
			   (,256-class (:foreground ,256-red))))

;;;;; eshell
     `(eshell-ls-archive ((,tc-class (:foreground ,red :weight bold))
			  (,256-class (:foreground ,256-red :weight bold))))
     `(eshell-ls-backup ((,tc-class (:inherit font-lock-comment-face))
			 (,256-class (:inherit font-lock-comment-face))))
     `(eshell-ls-clutter ((,tc-class (:inherit font-lock-comment-face))
			  (,256-class (:inherit font-lock-comment-face))))
     `(eshell-ls-directory ((,tc-class (:foreground ,blue))
			    (,256-class (:foreground ,256-blue))))
     `(eshell-ls-executable ((,tc-class (:foreground ,orange :weight bold))
			     (,256-class (:foreground ,256-orange :weight bold))))
     `(eshell-ls-missing ((,tc-class (:inherit font-lock-warning-face))
			  (,256-class (:inherit font-lock-warning-face))))
     `(eshell-ls-product ((,tc-class (:inherit font-lock-doc-face))
			  (,256-class (:inherit font-lock-doc-face))))
     `(eshell-ls-special ((,tc-class (:foreground ,magenta :weight bold))
			  (,256-class (:foreground ,256-magenta :weight bold))))
     `(eshell-ls-symlink ((,tc-class (:foreground ,cyan :weight bold))
			  (,256-class (:foreground ,256-cyan :weight bold))))
     `(eshell-ls-unreadable ((,tc-class (:foreground ,fg))
			     (,256-class (:foreground ,256-fg))))
     `(eshell-prompt ((,tc-class (:foreground ,magenta :weight bold))
		      (,256-class (:foreground ,256-magenta :weight bold))))

;;;;; evil
     `(evil-ex-substitute-matches ((,tc-class (:background ,red :foreground ,fg))
				   (,256-class (:background ,256-red :foreground ,256-fg))))
     `(evil-ex-substitute-replacement ((,tc-class (:background ,br-green :foreground ,term-bg))
				       (,256-class (:background ,256-br-green :foreground ,256-term-bg))))
     `(evil-search-highlight-persist-highlight-face ((,tc-class ,(if acario-invert-matches
								  `(:inverse-video t)
								`(:background ,br-term-bg :weight bold)))
						     (,256-class ,(if acario-invert-matches
								       `(:inverse-video t)
								     `(:background ,br-term-bg :weight bold)))))
;;;;; Flycheck
     `(flycheck-error ((,tc-class (:foreground ,red :underline t))
		       (,256-class (:foreground ,256-red :underline t))))
     `(flycheck-info ((,tc-class (:foreground ,fg :underline t))
		      (,256-class (:foreground ,256-fg :underline t))))
     `(flycheck-warning ((,tc-class (:foreground ,br-orange :underline t))
			 (,256-class (:foreground ,256-br-orange :underline t))))
     `(flycheck-error-list-checker-name ((,tc-class (:foreground ,red))
					 (,256-class (:foreground ,256-red))))
     `(flycheck-fringe-error ((,tc-class (:foreground ,red :weight bold))
			      (,256-class (:foreground ,256-red :weight bold))))
     `(flycheck-fringe-info ((,tc-class (:foreground ,red :weight bold))
			     (,256-class (:foreground ,256-red :weight bold))))
     `(flycheck-fringe-warning ((,tc-class (:foreground ,br-orange :weight bold))
				(,256-class (:foreground ,256-br-orange :weight bold))))

  ;;;;; flymake
     `(flymake-error ((,(append '((supports :underline (:style line))) tc-class)
		       (:underline (:style line :color ,red)))
		      (,tc-class (:foreground ,fg :background ,red :inherit bold :underline t))
		      (,256-class (:foreground ,256-fg :background ,256-red :inherit bold :underline t))))
     `(flymake-note ((,(append '((supports :underline (:style line))) tc-class)
		      (:underline (:style wave :color ,cyan)))
		     (,tc-class (:foreground ,fg :background ,cyan :inherit bold :underline t))
		     (,256-class (:foreground ,256-fg :background ,256-cyan :inherit bold :underline t))))
     `(flymake-warning ((,(append '((supports :underline (:style line))) tc-class)
			 (:underline (:style line :color ,orange)))
			(,tc-class (:foreground ,fg :background ,orange :inherit bold :underline t))
			(,256-class (:foreground ,256-fg :background ,256-orange :inherit bold :underline t))))

;;;;; Flyspell
     `(flyspell-duplicate ((,tc-class (:foreground ,fg :underline t))
			   (,256-class (:foreground ,256-fg :underline t))))
     `(flyspell-incorrect ((,tc-class (:foreground ,red :underline t))
			   (,256-class (:foreground ,256-red :underline t))))

;;;;; jabber
     `(jabber-activity-face ((,tc-class (:weight bold :foreground ,red))
			     (,256-class (:weight bold :foreground ,256-red))))
     `(jabber-activity-personal-face ((,tc-class (:weight bold :foreground ,blue))
				      (,256-class (:weight bold :foreground ,256-blue))))
     `(jabber-chat-error ((,tc-class (:weight bold :foreground ,red))
			  (,256-class (:weight bold :foreground ,256-red))))
     `(jabber-chat-prompt-foreign ((,tc-class (:weight bold :foreground ,red))
				   (,256-class (:weight bold :foreground ,256-red))))
     `(jabber-chat-prompt-local ((,tc-class (:weight bold :foreground ,blue))
				 (,256-class (:weight bold :foreground ,256-blue))))
     `(jabber-chat-prompt-system ((,tc-class (:weight bold :foreground ,green))
				  (,256-class (:weight bold :foreground ,256-green))))
     `(jabber-chat-text-foreign ((,tc-class (:foreground ,fg))
				 (,256-class (:foreground ,256-fg))))
     `(jabber-chat-text-local ((,tc-class (:foreground ,fg))
			       (,256-class (:foreground ,256-fg))))
     `(jabber-rare-time-face ((,tc-class (:foreground ,green))
			      (,256-class (:foreground ,256-green))))
     `(jabber-roster-user-away ((,tc-class (:foreground ,yellow))
				(,256-class (:foreground ,256-yellow))))
     `(jabber-roster-user-chatty ((,tc-class (:weight bold :foreground ,green))
				  (,256-class (:weight bold :foreground ,256-green))))
     `(jabber-roster-user-dnd ((,tc-class (:foreground ,red))
			       (,256-class (:foreground ,256-red))))
     `(jabber-roster-user-error ((,tc-class (:foreground ,red))
				 (,256-class (:foreground ,256-red))))
     `(jabber-roster-user-offline ((,tc-class (:foreground ,fg))
				   (,256-class (:foreground ,256-fg))))
     `(jabber-roster-user-online ((,tc-class (:weight bold :foreground ,green))
				  (,256-class (:weight bold :foreground ,256-green))))
     `(jabber-roster-user-xa ((,tc-class (:foreground ,cyan))
			      (,256-class (:foreground ,256-cyan))))

;;;;; git
     `(git-commit-summary ((,tc-class (:foreground ,br-magenta))
			   (,256-class (:foreground ,256-br-magenta))))
     `(git-commit-note ((,tc-class (:foreground ,fg))
			(,256-class (:foreground ,256-fg))))
     `(git-commit-nonempty-second-line ((,tc-class (:foreground ,yellow))
					(,256-class (:foreground ,256-yellow))))
     `(diff-file-header ((,tc-class (:foreground ,fg))
			 (,256-class (:foreground ,256-fg))))
     `(diff-hunk-header ((,tc-class (:foreground ,yellow))
			 (,256-class (:foreground ,256-yellow))))
     `(diff-function ((,tc-class (:foreground ,yellow))
		      (,256-class (:foreground ,256-yellow))))
     `(diff-header ((,tc-class (:foreground ,fg))
		    (,256-class (:foreground ,256-fg))))
     `(diff-context ((,tc-class :foreground ,term-fg)
		     (,256-class :foreground ,256-term-fg)))

;;;;; git-gutter-fr
     `(git-gutter-fr:added ((,tc-class (:foreground ,green :weight bold))
			    (,256-class (:foreground ,256-green :weight bold))))
     `(git-gutter-fr:deleted ((,tc-class (:foreground ,red :weight bold))
			      (,256-class (:foreground ,256-red :weight bold))))
     `(git-gutter-fr:modified ((,tc-class (:foreground ,blue :weight bold))
			       (,256-class (:foreground ,256-blue :weight bold))))
     `(git-gutter+-added ((,tc-class (:foreground ,green))
			  (,256-class (:foreground ,256-green))))
     `(git-gutter+-deleted ((,tc-class (:foreground ,red))
			    (,256-class (:foreground ,256-red))))
     `(git-gutter+-separator ((,tc-class (:foreground ,cyan))
			      (,256-class (:foreground ,256-cyan))))
     `(git-gutter+-modified ((,tc-class (:foreground ,magenta))
			     (,256-class (:foreground ,256-magenta))))
     `(git-gutter+-unchanged ((,tc-class (:foreground ,fg))
			      (,256-class (:foreground ,256-fg))))
     `(git-gutter:added ((,tc-class (:foreground ,green))
			 (,256-class (:foreground ,256-green))))
     `(git-gutter:modified ((,tc-class (:foreground ,magenta))
			    (,256-class (:foreground ,256-magenta))))
     `(git-gutter:unchanged ((,tc-class (:foreground ,fg))
			     (,256-class (:foreground ,256-fg))))

;;;;; git-timemachine
     `(git-timemachine-minibuffer-detail-face ((,tc-class (:foreground ,blue :weight bold :background ,blue))
					       (,256-class (:foreground ,256-blue :weight bold :background ,256-blue))))

;;;;; gnus
     `(gnus-emphasis-highlight-words ((,tc-class (:background ,green :foreground ,term-bg))
				      (,256-class (:background ,256-green :foreground ,256-term-bg))))
     `(gnus-header-content ((,tc-class (:foreground ,red))
			    (,256-class (:foreground ,256-red))))
     `(gnus-header-from ((,tc-class (:foreground ,blue))
			 (,256-class (:foreground ,256-blue))))
     `(gnus-header-name ((,tc-class (:foreground ,green))
			 (,256-class (:foreground ,256-green))))
     `(gnus-header-subject ((,tc-class (:foreground ,yellow :weight bold))
			    (,256-class (:foreground ,256-yellow :weight bold))))
     `(gnus-summary-cancelled ((,tc-class (:background ,br-orange :foreground ,term-bg))
			       (,256-class (:background ,256-br-orange :foreground ,256-term-bg))))

;;;;; guide-key
     `(guide-key/highlight-command-face ((,tc-class (:foreground ,fg))
					 (,256-class (:foreground ,256-fg))))
     `(guide-key/key-face ((,tc-class (:foreground ,red))
			   (,256-class (:foreground ,256-red))))
     `(guide-key/prefix-command-face ((,tc-class (:foreground ,red :weight bold))
				      (,256-class (:foreground ,256-red :weight bold))))

;;;;; helm
     `(helm-bookmark-directory ((,tc-class (:inherit helm-ff-directory))
				(,256-class (:inherit helm-ff-directory))))
     `(helm-bookmark-file ((,tc-class (:foreground ,fg))
			   (,256-class (:foreground ,256-fg))))
     `(helm-bookmark-gnus ((,tc-class (:foreground ,green))
			   (,256-class (:foreground ,256-green))))
     `(helm-bookmark-info ((,tc-class (:foreground ,green))
			   (,256-class (:foreground ,256-green))))
     `(helm-bookmark-man ((,tc-class (:foreground ,green))
			  (,256-class (:foreground ,256-green))))
     `(helm-bookmark-w3m ((,tc-class (:foreground ,green))
			  (,256-class (:foreground ,256-green))))
     `(helm-buffer-directory ((,tc-class (:foreground ,blue))
			      (,256-class (:foreground ,256-blue))))
     `(helm-buffer-file ((,tc-class (:foreground ,fg :background ,term-bg))
			 (,256-class (:foreground ,256-fg :background ,256-term-bg))))
     `(helm-buffer-not-saved ((,tc-class (:foreground ,green :background ,term-bg))
			      (,256-class (:foreground ,256-green :background ,256-term-bg))))
     `(helm-buffer-process ((,tc-class (:foreground ,red :background ,term-bg))
			    (,256-class (:foreground ,256-red :background ,256-term-bg))))
     `(helm-buffer-saved-out ((,tc-class (:foreground ,fg :background ,term-bg))
			      (,256-class (:foreground ,256-fg :background ,256-term-bg))))
     `(helm-buffer-size ((,tc-class (:foreground ,fg :background ,term-bg))
			 (,256-class (:foreground ,256-fg :background ,256-term-bg))))
     `(helm-candidate-number ((,tc-class (:background ,term-bg :foreground ,red :weight bold))
			      (,256-class (:background ,256-term-bg :foreground ,256-red :weight bold))))
     `(helm-ff-directory ((,tc-class (:foreground ,blue))
			  (,256-class (:foreground ,256-blue))))
     `(helm-ff-dotted-directory ((,tc-class (:foreground ,blue))
				 (,256-class (:foreground ,256-blue))))
     `(helm-ff-dotted-symlink-directory ((,tc-class (:foreground ,cyan))
					 (,256-class (:foreground ,256-cyan))))
     `(helm-ff-executable ((,tc-class (:foreground ,green :background ,term-bg :weight normal))
			   (,256-class (:foreground ,256-green :background ,256-term-bg :weight normal))))
     `(helm-ff-file ((,tc-class (:foreground ,fg :background ,term-bg :weight normal))
		     (,256-class (:foreground ,256-fg :background ,256-term-bg :weight normal))))
     `(helm-ff-invalid-symlink ((,tc-class (:foreground ,red :background ,term-bg :weight bold))
				(,256-class (:foreground ,256-red :background ,256-term-bg :weight bold))))
     `(helm-ff-prefix ((,tc-class (:foreground ,term-bg :background ,red :weight normal))
		       (,256-class (:foreground ,256-term-bg :background ,256-red :weight normal))))
     `(helm-ff-symlink ((,tc-class (:foreground ,cyan :background ,term-bg :weight bold))
			(,256-class (:foreground ,256-cyan :background ,256-term-bg :weight bold))))
     `(helm-grep-cmd-line ((,tc-class (:foreground ,fg :background ,term-bg))
			   (,256-class (:foreground ,256-fg :background ,256-term-bg))))
     `(helm-grep-file ((,tc-class (:foreground ,fg :background ,term-bg))
		       (,256-class (:foreground ,256-fg :background ,256-term-bg))))
     `(helm-grep-finish ((,tc-class (:foreground ,fg :background ,term-bg))
			 (,256-class (:foreground ,256-fg :background ,256-term-bg))))
     `(helm-grep-lineno ((,tc-class (:foreground ,br-blue :background ,term-bg :weight bold))
			 (,256-class (:foreground ,256-br-blue :background ,256-term-bg :weight bold))))
     `(helm-grep-match ((,tc-class (:foreground nil :background nil :inherit helm-match))
			(,256-class (:foreground nil :background nil :inherit helm-match))))
     `(helm-header ((,tc-class (:foreground ,fg :background ,term-bg :underline nil :box nil))
		    (,256-class (:foreground ,256-fg :background ,256-term-bg :underline nil :box nil))))
     `(helm-header-line-left-margin ((,tc-class (:foreground ,red :background ,nil))
				     (,256-class (:foreground ,256-red :background ,nil))))
     `(helm-match ((,tc-class (:foreground ,br-blue))
		   (,256-class (:foreground ,256-br-blue))))
     `(helm-match-item ((,tc-class (:foreground ,br-blue))
			(,256-class (:foreground ,256-br-blue))))
     `(helm-moccur-buffer ((,tc-class (:foreground ,blue :background ,term-bg))
			   (,256-class (:foreground ,256-blue :background ,256-term-bg))))
     `(helm-selection ((,tc-class (:background ,gray1 :weight bold))
		       (,256-class (:background ,256-gray1 :weight bold))))
     `(helm-selection-line ((,tc-class (:background ,gray1 :weight bold))
			    (,256-class (:background ,256-gray1 :weight bold))))
     `(helm-separator ((,tc-class (:foreground ,green :background ,term-bg))
		       (,256-class (:foreground ,256-green :background ,256-term-bg))))
     `(helm-source-header ((,tc-class (:background ,term-bg :foreground ,green :underline t))
			   (,256-class (:background ,256-term-bg :foreground ,256-green :underline t))))
     `(helm-time-zone-current ((,tc-class (:foreground ,red :background ,term-bg))
			       (,256-class (:foreground ,256-red :background ,256-term-bg))))
     `(helm-time-zone-home ((,tc-class (:foreground ,green :background ,term-bg))
			    (,256-class (:foreground ,256-green :background ,256-term-bg))))
     `(helm-visible-mark ((,tc-class (:foreground ,red :background ,term-bg))
			  (,256-class (:foreground ,256-red :background ,256-term-bg))))

;;;;; helm-swoop
     `(helm-swoop-target-line-block-face ((,tc-class (:foreground ,yellow :background ,term-bg))
					  (,256-class (:foreground ,256-yellow :background ,256-term-bg))))
     `(helm-swoop-target-line-face ((,tc-class (:background ,gray1 :weight bold))
				    (,256-class (:background ,256-gray1 :weight bold))))
     `(helm-swoop-target-word-face ((,tc-class (:foreground ,magenta :underline t))
				    (,256-class (:foreground ,256-magenta :underline t))))

;;;;; highlights
     `(hi-yellow ((,tc-class (:foreground ,yellow))
		  (,256-class (:foreground ,256-yellow))))
     `(hi-green ((,tc-class (:foreground ,green))
		 (,256-class (:foreground ,256-green))))

;;;;; highlight-indentation
     `(highlight-indentation-face ((,tc-class (:background ,term-fg))
				   (,256-class (:background ,256-term-fg))))

;;;;; highlight-symbol
     `(highlight-symbol-face ((,tc-class (:background ,br-term-bg))
			      (,256-class (:background ,256-br-term-bg))))

;;;;; hydra
     `(hydra-face-blue ((,tc-class (:foreground ,blue))
			(,256-class (:foreground ,256-blue))))
     `(hydra-face-red ((,tc-class (:foreground ,red))
		       (,256-class (:foreground ,256-red))))

;;;;; ido
     `(ido-first-match ((,tc-class (:foreground ,green :weight bold))
			(,256-class (:foreground ,256-green :weight bold))))
     `(ido-only-match ((,tc-class (:foreground ,yellow :weight bold))
		       (,256-class (:foreground ,256-yellow :weight bold))))
     `(ido-subdir ((,tc-class (:foreground ,red))
		   (,256-class (:foreground ,256-red))))
     `(ido-indicator ((,tc-class (:background ,red :foreground ,fg))
		      (,256-class (:background ,256-red :foreground ,256-fg))))
     `(ido-vertical-match-face ((,tc-class (:foreground ,green :underline nil))
				(,256-class (:foreground ,256-green :underline nil))))

;;;;; info
     `(info-header-xref ((,tc-class (:foreground ,yellow :underline t))
			 (,256-class (:foreground ,256-yellow :underline t))))
     `(info-menu ((,tc-class (:foreground ,green))
		  (,256-class (:foreground ,256-green))))
     `(info-node ((,tc-class (:foreground ,yellow :weight bold))
		  (,256-class (:foreground ,256-yellow :weight bold))))
     `(info-quoted-name ((,tc-class (:foreground ,red))
			 (,256-class (:foreground ,256-red))))
     `(info-reference-item ((,tc-class (:background nil :underline t :weight bold))
			    (,256-class (:background nil :underline t :weight bold))))
     `(info-string ((,tc-class (:foreground ,br-green))
		    (,256-class (:foreground ,256-br-green))))
     `(info-title-1 ((,tc-class (:height 1.4 :weight bold))
		     (,256-class (:height 1.4 :weight bold))))
     `(info-title-2 ((,tc-class (:height 1.3 :weight bold))
		     (,256-class (:height 1.3 :weight bold))))
     `(info-title-3 ((,tc-class (:height 1.3))
		     (,256-class (:height 1.3))))
     `(info-title-4 ((,tc-class (:height 1.2))
		     (,256-class (:height 1.2))))

;;;;; ivy
     `(ivy-current-match ((,tc-class (:background ,gray2 :weight bold))
			  (,256-class (:background ,256-gray2 :weight bold))))
     `(ivy-minibuffer-match-face-1 ((,tc-class (:weight bold))
				    (,256-class (:weight bold))))
     `(ivy-minibuffer-match-face-2 ((,tc-class (:foreground ,magenta :underline t))
				    (,256-class (:foreground ,256-magenta :underline t))))
     `(ivy-minibuffer-match-face-3 ((,tc-class (:foreground ,yellow :underline t))
				    (,256-class (:foreground ,256-yellow :underline t))))
     `(ivy-minibuffer-match-face-4 ((,tc-class (:foreground ,br-green :underline t))
				    (,256-class (:foreground ,256-br-green :underline t))))
     `(ivy-remote ((,tc-class (:foreground ,cyan))
		   (,256-class (:foreground ,256-cyan))))
     `(ivy-modified-buffer ((,tc-class (:foreground ,red))
			    (,256-class (:foreground ,256-red))))
     `(ivy-modified-outside-buffer ((,tc-class (:foreground ,br-red))
				    (,256-class (:foreground ,256-br-red))))

;;;;; latex
     `(font-latex-bold-face ((,tc-class (:foreground ,green))
			     (,256-class (:foreground ,256-green))))
     `(font-latex-italic-face ((,tc-class (:foreground ,red :italic t))
			       (,256-class (:foreground ,256-red :italic t))))
     `(font-latex-match-reference-keywords ((,tc-class (:foreground ,br-magenta))
					    (,256-class (:foreground ,256-br-magenta))))
     `(font-latex-match-variable-keywords ((,tc-class (:foreground ,blue))
					   (,256-class (:foreground ,256-blue))))
     `(font-latex-sectioning-0-face ((,tc-class (:weight bold :foreground ,br-green :height ,(if acario-org-height 1.3 1.0)))
				     (,256-class (:weight bold :foreground ,256-br-green :height ,(if acario-org-height 1.3 1.0)))))
     `(font-latex-sectioning-1-face ((,tc-class (:weight bold :foreground ,br-yellow :height ,(if acario-org-height 1.3 1.0)))
				     (,256-class (:weight bold :foreground ,256-br-yellow :height ,(if acario-org-height 1.3 1.0)))))
     `(font-latex-sectioning-2-face ((,tc-class (:weight bold :foreground ,blue :height ,(if acario-org-height 1.3 1.0)))
				     (,256-class (:weight bold :foreground ,256-blue :height ,(if acario-org-height 1.3 1.0)))))
     `(font-latex-sectioning-3-face ((,tc-class (:weight bold :foreground ,cyan :height ,(if acario-org-height 1.2 1.0)))
				     (,256-class (:weight bold :foreground ,256-cyan :height ,(if acario-org-height 1.2 1.0)))))
     `(font-latex-sectioning-4-face ((,tc-class (:bold nil :foreground ,br-green :height ,(if acario-org-height 1.1 1.0)))
				     (,256-class (:bold nil :foreground ,256-br-green :height ,(if acario-org-height 1.1 1.0)))))
     `(font-latex-sectioning-5-face ((,tc-class (:bold nil :foreground ,yellow))
				     (,256-class (:bold nil :foreground ,256-yellow))))
     `(font-latex-string-face ((,tc-class (:foreground ,br-green))
			       (,256-class (:foreground ,256-br-green))))

;;;;; Line numbers
     `(linum ((,tc-class (:foreground ,term-fg :background ,gray1))
	      (,256-class (:foreground ,256-term-fg :background ,256-gray1))))
     `(linum-relative-current-face ((,tc-class (:foreground ,yellow))
				    (,256-class (:foreground ,256-yellow))))
     `(line-number ((,tc-class (:foreground ,term-fg :background ,gray1))
		    (,256-class (:foreground ,256-term-fg :background ,256-gray1))))
     `(line-number-current-line ((,tc-class (:foreground ,yellow))
				 (,256-class (:foreground ,256-yellow))))

;;;;; magit
     `(magit-blame-culprit ((,tc-class :foreground ,yellow)
			    (,256-class :foreground ,256-yellow)))
     `(magit-blame-header ((,tc-class :foreground ,green)
			   (,256-class :foreground ,256-green)))
     `(magit-blame-sha1 ((,tc-class :foreground ,yellow)
			 (,256-class :foreground ,256-yellow)))
     `(magit-blame-subject ((,tc-class :foreground ,yellow)
			    (,256-class :foreground ,256-yellow)))
     `(magit-blame-time ((,tc-class :foreground ,green)
			 (,256-class :foreground ,256-green)))
     `(magit-blame-name ((,tc-class :foreground ,yellow)
			 (,256-class :foreground ,256-yellow)))
     `(magit-blame-heading ((,tc-class :foreground ,green)
			    (,256-class :foreground ,256-green)))
     `(magit-blame-hash ((,tc-class :foreground ,yellow)
			 (,256-class :foreground ,256-yellow)))
     `(magit-blame-summary ((,tc-class :foreground ,yellow)
			    (,256-class :foreground ,256-yellow)))
     `(magit-blame-date ((,tc-class :foreground ,green)
			 (,256-class :foreground ,256-green)))
     `(magit-log-date ((,tc-class :foreground ,fg)
		       (,256-class :foreground ,256-fg)))
     `(magit-log-graph ((,tc-class :foreground ,fg)
			(,256-class :foreground ,256-fg)))
     `(magit-reflog-amend ((,tc-class :foreground ,magenta)
			   (,256-class :foreground ,256-magenta)))
     `(magit-reflog-other ((,tc-class :foreground ,cyan)
			   (,256-class :foreground ,256-cyan)))
     `(magit-reflog-rebase ((,tc-class :foreground ,magenta)
			    (,256-class :foreground ,256-magenta)))
     `(magit-reflog-remote ((,tc-class :foreground ,cyan)
			    (,256-class :foreground ,256-cyan)))
     `(magit-reflog-reset ((,tc-class :foreground ,red)
			   (,256-class :foreground ,256-red)))
     `(magit-branch ((,tc-class (:foreground ,br-magenta :weight bold))
		     (,256-class (:foreground ,256-br-magenta :weight bold))))
     `(magit-branch-current ((,tc-class (:background ,term-bg :foreground ,blue :weight bold :box t))
			     (,256-class (:background ,256-term-bg :foreground ,256-blue :weight bold :box t))))
     `(magit-branch-local ((,tc-class (:background ,term-bg :foreground ,blue :weight bold))
			   (,256-class (:background ,256-term-bg :foreground ,256-blue :weight bold))))
     `(magit-branch-remote ((,tc-class (:background ,term-bg :foreground ,orange :weight bold))
			    (,256-class (:background ,256-term-bg :foreground ,256-orange :weight bold))))
     `(magit-diff-file-header ((,tc-class (:foreground ,yellow))
			       (,256-class (:foreground ,256-yellow))))
     `(magit-diff-file-heading ((,tc-class (:foreground ,blue :weight light))
				(,256-class (:foreground ,256-blue :weight light))))
     `(magit-diff-file-heading-highlight ((,tc-class (:foreground ,blue :weight bold))
					  (,256-class (:foreground ,256-blue :weight bold))))
     `(magit-diff-file-heading-selection ((,tc-class (:foreground ,blue :weight bold :background ,gray1))
					  (,256-class (:foreground ,256-blue :weight bold :background ,256-gray1))))
     `(magit-diff-hunk-heading ((,tc-class (:foreground ,yellow :weight light))
				(,256-class (:foreground ,256-yellow :weight light))))
     `(magit-diff-hunk-heading-highlight ((,tc-class (:foreground ,yellow :weight bold))
					  (,256-class (:foreground ,256-yellow :weight bold))))
     `(magit-diff-hunk-heading-selection ((,tc-class (:foreground ,term-bg :background ,sel :weight bold))
					  (,256-class (:foreground ,256-term-bg :background ,256-sel :weight bold))))
     `(magit-diff-added ((,tc-class (:foreground ,green :weight light))
			 (,256-class (:foreground ,256-green :weight light))))
     `(magit-diff-removed ((,tc-class (:foreground ,red :weight light))
			   (,256-class (:foreground ,256-red :weight light))))
     `(magit-diff-context ((,tc-class (:foreground ,term-fg :weight light))
			   (,256-class (:foreground ,256-term-fg :weight light))))
     `(magit-diff-added-highlight ((,tc-class (:foreground ,green :weight bold))
				   (,256-class (:foreground ,256-green :weight bold))))
     `(magit-diff-removed-highlight ((,tc-class (:foreground ,red :weight bold))
				     (,256-class (:foreground ,256-red :weight bold))))
     `(magit-diff-context-highlight ((,tc-class (:foreground ,term-fg :weight bold))
				     (,256-class (:foreground ,256-term-fg :weight bold))))
     `(magit-diff-base ((,tc-class (:foreground ,term-fg :weight light))
			(,256-class (:foreground ,256-term-fg :weight light))))
     `(magit-diff-base-highlight ((,tc-class (:foreground ,term-fg :weight bold))
				  (,256-class (:foreground ,256-term-fg :weight bold))))
     `(magit-diff-lines-boundary ((,tc-class (:background ,term-fg :foreground ,term-bg))
				  (,256-class (:background ,256-term-fg :foreground ,256-term-bg))))
     `(magit-diff-lines-heading ((,tc-class (:background ,term-fg :foreground ,term-bg))
				 (,256-class (:background ,256-term-fg :foreground ,256-term-bg))))
     `(magit-hash ((,tc-class (:foreground ,yellow))
		   (,256-class (:foreground ,256-yellow))))
     `(magit-item-highlight ((,tc-class :background ,br-term-bg)
			     (,256-class :background ,256-br-term-bg)))
     `(magit-log-author ((,tc-class (:foreground ,yellow))
			 (,256-class (:foreground ,256-yellow))))
     `(magit-log-head-label-head ((,tc-class (:background ,yellow :foreground ,term-bg :weight bold))
				  (,256-class (:background ,256-yellow :foreground ,256-term-bg :weight bold))))
     `(magit-log-head-label-local ((,tc-class (:background ,red :foreground ,term-bg :weight bold))
				   (,256-class (:background ,256-red :foreground ,256-term-bg :weight bold))))
     `(magit-log-head-label-remote ((,tc-class (:background ,green :foreground ,term-bg :weight bold))
				    (,256-class (:background ,256-green :foreground ,256-term-bg :weight bold))))
     `(magit-log-head-label-tags ((,tc-class (:background ,magenta :foreground ,term-bg :weight bold))
				  (,256-class (:background ,256-magenta :foreground ,256-term-bg :weight bold))))
     `(magit-log-head-label-wip ((,tc-class (:background ,cyan :foreground ,term-bg :weight bold))
				 (,256-class (:background ,256-cyan :foreground ,256-term-bg :weight bold))))
     `(magit-log-sha1 ((,tc-class (:foreground ,br-green))
		       (,256-class (:foreground ,256-br-green))))
     `(magit-process-ng ((,tc-class (:foreground ,br-orange :weight bold))
			 (,256-class (:foreground ,256-br-orange :weight bold))))
     `(magit-process-ok ((,tc-class (:foreground ,yellow :weight bold))
			 (,256-class (:foreground ,256-yellow :weight bold))))
     `(magit-section-heading ((,tc-class (:foreground ,red))
			      (,256-class (:foreground ,256-red))))
     `(magit-section-highlight ((,tc-class (:weight bold))
				(,256-class (:weight bold))))
     `(section-heading-selection ((,tc-class (:foreground ,red :weight bold))
				  (,256-class (:foreground ,256-red :weight bold))))
     `(magit-section-title ((,tc-class (:background ,term-bg :foreground ,red :weight bold))
			    (,256-class (:background ,256-term-bg :foreground ,256-red :weight bold))))
     `(magit-cherry-equivalent ((,tc-class (:foreground ,magenta))
				(,256-class (:foreground ,256-magenta))))
     `(magit-cherry-unmatched ((,tc-class (:foreground ,cyan))
			       (,256-class (:foreground ,256-cyan))))
     `(magit-reflog-checkout ((,tc-class (:foreground ,blue))
			      (,256-class (:foreground ,256-blue))))
     `(magit-reflog-cherry-pick ((,tc-class (:foreground ,br-green))
				 (,256-class (:foreground ,256-br-green))))
     `(magit-bisect-bad ((,tc-class (:foreground ,red))
			 (,256-class (:foreground ,256-red))))
     `(magit-bisect-good ((,tc-class (:foreground ,green))
			  (,256-class (:foreground ,256-green))))
     `(magit-bisect-skip ((,tc-class (:foreground ,fg))
			  (,256-class (:foreground ,256-fg))))
     `(magit-diff-conflict-heading ((,tc-class (:foreground ,fg))
				    (,256-class (:foreground ,256-fg))))
     `(magit-dimmed ((,tc-class (:foreground ,term-fg))
		     (,256-class (:foreground ,256-term-fg))))
     `(magithub-ci-no-status ((,tc-class (:foreground ,gray5))
			      (,256-class (:foreground ,256-gray5))))
     `(magithub-issue-number ((,tc-class (:foreground ,term-fg))
			      (,256-class (:foreground ,256-term-fg))))
     `(magithub-notification-reason ((,tc-class (:foreground ,term-fg))
				     (,256-class (:foreground ,256-term-fg))))

;;;;; smerge
     `(smerge-base ((,tc-class (:foreground ,fg))
		    (,256-class (:foreground ,256-fg))))
     `(smerge-markers ((,tc-class (:foreground ,yellow))
		       (,256-class (:foreground ,256-yellow))))
     `(smerge-mine ((,tc-class (:foreground nil))
		    (,256-class (:foreground nil))))
     `(smerge-other ((,tc-class (:background ,br-term-bg))
		     (,256-class (:background ,256-br-term-bg))))
     `(smerge-refined-added ((,tc-class (:foreground ,green))
			     (,256-class (:foreground ,256-green))))
     `(smerge-refined-changed ((,tc-class (:foreground ,blue))
			       (,256-class (:foreground ,256-blue))))
     `(smerge-refined-removed ((,tc-class (:foreground ,red))
			       (,256-class (:foreground ,256-red))))
     `(smerge-upper ((,tc-class (:foreground ,red))
		     (,256-class (:foreground ,256-red))))
     `(smerge-lower ((,tc-class (:foreground ,green))
		     (,256-class (:foreground ,256-green))))

;;;;; man
     `(Man-overstrike ((,tc-class (:foreground ,blue :weight bold))
		       (,256-class (:foreground ,256-blue :weight bold))))
     `(Man-reverse ((,tc-class (:foreground ,magenta))
		    (,256-class (:foreground ,256-magenta))))
     `(Man-underline ((,tc-class (:foreground ,green :underline t))
		      (,256-class (:foreground ,256-green :underline t))))

;;;;; markdown
     `(markdown-header-face-1 ((,tc-class (:weight bold :foreground ,blue :height ,(if acario-org-height 1.3 1.0)))
			       (,256-class (:weight bold :foreground ,256-blue :height ,(if acario-org-height 1.3 1.0)))))
     `(markdown-header-face-2 ((,tc-class (:weight bold :foreground ,br-cyan :height ,(if acario-org-height 1.2 1.0)))
			       (,256-class (:weight bold :foreground ,256-br-cyan :height ,(if acario-org-height 1.2 1.0)))))
     `(markdown-header-face-3 ((,tc-class (:bold nil :foreground ,br-green :height ,(if acario-org-height 1.1 1.0)))
			       (,256-class (:bold nil :foreground ,256-br-green :height ,(if acario-org-height 1.1 1.0)))))
     `(markdown-header-face-4 ((,tc-class (:bold nil :foreground ,yellow))
			       (,256-class (:bold nil :foreground ,256-yellow))))
     `(markdown-header-face-5 ((,tc-class (:bold nil :foreground ,blue))
			       (,256-class (:bold nil :foreground ,256-blue))))
     `(markdown-header-face-6 ((,tc-class (:bold nil :foreground ,cyan))
			       (,256-class (:bold nil :foreground ,256-cyan))))
     `(markdown-html-tag-delimiter-face ((,tc-class (:bold nil :foreground ,gray5))
					 (,256-class (:bold nil :foreground ,256-gray5))))
     `(markdown-list-face ((,tc-class (:bold nil :foreground ,gray5))
			   (,256-class (:bold nil :foreground ,256-gray5))))
     `(markdown-markup-face ((,tc-class (:bold nil :foreground ,gray5))
			     (,256-class (:bold nil :foreground ,256-gray5))))

;;;;; mu4e
     `(mu4e-cited-1-face ((,tc-class (:foreground ,fg))
			  (,256-class (:foreground ,256-fg))))
     `(mu4e-cited-7-face ((,tc-class (:foreground ,fg))
			  (,256-class (:foreground ,256-fg))))
     `(mu4e-header-marks-face ((,tc-class (:foreground ,green))
			       (,256-class (:foreground ,256-green))))
     `(mu4e-header-key-face ((,tc-class (:foreground ,cyan :weight bold))
			     (,256-class (:foreground ,256-cyan :weight bold))))
     `(mu4e-view-url-number-face ((,tc-class (:foreground ,green))
				  (,256-class (:foreground ,256-green))))
     `(mu4e-unread-face ((,tc-class (:foreground ,yellow :weight bold))
			 (,256-class (:foreground ,256-yellow :weight bold))))

;;;;; neotree
     `(neo-dir-link-face ((,tc-class (:foreground ,red :weight bold))
			  (,256-class (:foreground ,256-red :weight bold))))
     `(neo-expand-btn-face ((,tc-class (:foreground ,fg))
			    (,256-class (:foreground ,256-fg))))
     `(neo-file-link-face ((,tc-class (:foreground ,fg))
			   (,256-class (:foreground ,256-fg))))
     `(neo-root-dir-face ((,tc-class (:foreground ,yellow :weight bold))
			  (,256-class (:foreground ,256-yellow :weight bold))))

;;;;; org
     `(org-agenda-clocking ((,tc-class (:background ,magenta :foreground ,green))
			    (,256-class (:background ,256-magenta :foreground ,256-green))))
     `(org-agenda-date ((,tc-class (:foreground ,blue :height ,(if acario-org-height 1.1 1.0)))
			(,256-class (:foreground ,256-blue :height ,(if acario-org-height 1.1 1.0)))))
     `(org-agenda-date-today ((,tc-class (:foreground ,red :slant italic :weight bold :height ,(if acario-org-height 1.3 1.0)))
			      (,256-class (:foreground ,256-red :slant italic :weight bold :height ,(if acario-org-height 1.3 1.0)))))
     `(org-agenda-date-weekend ((,tc-class (:weight bold :foreground ,blue))
				(,256-class (:weight bold :foreground ,256-blue))))
     `(org-agenda-done ((,tc-class (:foreground ,green :height ,(if acario-org-height 1.2 1.0)))
			(,256-class (:foreground ,256-green :height ,(if acario-org-height 1.2 1.0)))))
     `(org-agenda-structure ((,tc-class (:weight bold :foreground ,green))
			     (,256-class (:weight bold :foreground ,256-green))))
     `(org-block ((,tc-class (:foreground ,fg))
		  (,256-class (:foreground ,256-fg))))
     `(org-block-begin-line ((,tc-class (:foreground ,green))
			     (,256-class (:foreground ,256-green))))
     `(org-block-end-line ((,tc-class (:foreground ,green))
			   (,256-class (:foreground ,256-green))))
     `(org-clock-overlay ((,tc-class (:foreground ,green))
			  (,256-class (:foreground ,256-green))))
     `(org-code ((,tc-class (:foreground ,cyan))
		 (,256-class (:foreground ,256-cyan))))
     `(org-column ((,tc-class (:background ,magenta))
		   (,256-class (:background ,256-magenta))))
     `(org-column-title ((,tc-class (:background ,magenta))
			 (,256-class (:background ,256-magenta))))
     `(org-date ((,tc-class (:underline t :foreground ,blue))
		 (,256-class (:underline t :foreground ,256-blue))))
     `(org-date-selected ((,tc-class (:background ,yellow :foreground ,term-bg))
			  (,256-class (:background ,256-yellow :foreground ,256-term-bg))))
     `(org-document-info-keyword ((,tc-class (:foreground ,term-fg))
				  (,256-class (:foreground ,256-term-fg))))
     `(org-document-info ((,tc-class (:foreground ,br-magenta))
			  (,256-class (:foreground ,256-br-magenta))))
     `(org-document-title ((,tc-class (:foreground ,yellow :weight bold :height ,(if acario-org-height 1.4 1.0)))
			   (,256-class (:foreground ,256-yellow :weight bold :height ,(if acario-org-height 1.4 1.0)))))
     `(org-done ((,tc-class (:foreground ,green :weight bold))
		 (,256-class (:foreground ,256-green :weight bold))))
     `(org-ellipsis ((,tc-class (:foreground ,red))
		     (,256-class (:foreground ,256-red))))
     `(org-footnote ((,tc-class (:underline t :foreground ,fg))
		     (,256-class (:underline t :foreground ,256-fg))))
     `(org-hide ((,tc-class (:foreground ,gray1 :background ,term-bg))
		 (,256-class (:foreground ,256-gray1 :background ,256-term-bg))))
     `(org-kbd ((,tc-class (:inherit region :foreground ,fg :box (:line-width 1 :style released-button)))
		(,256-class (:inherit region :foreground ,256-fg :box (:line-width 1 :style released-button)))))
     `(org-level-1 ((,tc-class (:weight bold :foreground ,br-blue :height ,(if acario-org-height 1.3 1.0)))
		    (,256-class (:weight bold :foreground ,256-br-blue :height ,(if acario-org-height 1.3 1.0)))))
     `(org-level-2 ((,tc-class (:weight bold :foreground ,green :height ,(if acario-org-height 1.2 1.0)))
		    (,256-class (:weight bold :foreground ,256-green :height ,(if acario-org-height 1.2 1.0)))))
     `(org-level-3 ((,tc-class (:bold nil :foreground ,yellow :height ,(if acario-org-height 1.1 1.0)))
		    (,256-class (:bold nil :foreground ,256-yellow :height ,(if acario-org-height 1.1 1.0)))))
     `(org-level-4 ((,tc-class (:bold nil :foreground ,blue))
		    (,256-class (:bold nil :foreground ,256-blue))))
     `(org-level-5 ((,tc-class (:bold nil :foreground ,cyan))
		    (,256-class (:bold nil :foreground ,256-cyan))))
     `(org-level-6 ((,tc-class (:bold nil :foreground ,green))
		    (,256-class (:bold nil :foreground ,256-green))))
     `(org-level-7 ((,tc-class (:bold nil :foreground ,br-orange))
		    (,256-class (:bold nil :foreground ,256-br-orange))))
     `(org-level-8 ((,tc-class (:bold nil :foreground ,br-magenta))
		    (,256-class (:bold nil :foreground ,256-br-magenta))))
     `(org-link ((,tc-class (:foreground ,term-fg :underline t))
		 (,256-class (:foreground ,256-term-fg :underline t))))
     `(org-meta-line ((,tc-class (:foreground ,term-fg))
		      (,256-class (:foreground ,256-term-fg))))
     `(org-mode-line-clock-overrun ((,tc-class (:foreground ,red))
				    (,256-class (:foreground ,256-red))))
     `(org-mode-line-clock ((,tc-class (:foreground ,br-green))
			    (,256-class (:foreground ,256-br-green))))
     `(org-priority ((,tc-class (:foreground ,br-orange :weight bold))
		     (,256-class (:foreground ,256-br-orange :weight bold))))
     `(org-quote ((,tc-class (:inherit org-block :slant italic))
		  (,256-class (:inherit org-block :slant italic))))
     `(org-scheduled ((,tc-class (:foreground ,green))
		      (,256-class (:foreground ,256-green))))
     `(org-scheduled-today ((,tc-class (:foreground ,yellow :height ,(if acario-org-height 1.2 1.0)))
			    (,256-class (:foreground ,256-yellow :height ,(if acario-org-height 1.2 1.0)))))
     `(org-sexp-date ((,tc-class (:foreground ,fg))
		      (,256-class (:foreground ,256-fg))))
     `(org-special-keyword ((,tc-class (:foreground ,yellow))
			    (,256-class (:foreground ,256-yellow))))
     `(org-table ((,tc-class (:foreground ,fg :background ,gray1))
		  (,256-class (:foreground ,256-fg :background ,256-gray1))))
     `(org-time-grid ((,tc-class (:foreground ,br-green))
		      (,256-class (:foreground ,256-br-green))))
     `(org-todo ((,tc-class (:foreground ,yellow :weight bold))
		 (,256-class (:foreground ,256-yellow :weight bold))))
     `(org-verbatim ((,tc-class (:foreground ,br-orange))
		     (,256-class (:foreground ,256-br-orange))))
     `(org-verse ((,tc-class (:inherit org-block :slant italic))
		  (,256-class (:inherit org-block :slant italic))))
     `(org-warning ((,tc-class (:foreground ,red))
		    (,256-class (:foreground ,256-red))))

;;;;; Outline / Outshine
     `(outline-1 ((,tc-class (:inherit org-level-1))
		  (,256-class (:inherit org-level-1))))
     `(outline-2 ((,tc-class (:inherit org-level-2))
		  (,256-class (:inherit org-level-2))))
     `(outline-3 ((,tc-class (:inherit org-level-3))
		  (,256-class (:inherit org-level-3))))
     `(outline-4 ((,tc-class (:inherit org-level-4))
		  (,256-class (:inherit org-level-4))))
     `(outline-5 ((,tc-class (:inherit org-level-5))
		  (,256-class (:inherit org-level-5))))
     `(outline-6 ((,tc-class (:inherit org-level-6))
		  (,256-class (:inherit org-level-6))))
     `(outline-7 ((,tc-class (:inherit org-level-7))
		  (,256-class (:inherit org-level-7))))

;;;;; TODO : Outline ivy
     ;; oi-match-face
     ;; oi-face-1
     ;; oi-face-2
     ;; oi-face-3
;;;;; perspective
     `(persp-selected-face ((,tc-class (:weight bold :foreground ,yellow))
			    (,256-class (:weight bold :foreground ,256-yellow))))

;;;;; popup
     `(popup-face ((,tc-class (:background ,br-term-bg :foreground ,fg))
		   (,256-class (:background ,256-br-term-bg :foreground ,256-fg))))
     `(popup-tip-face ((,tc-class (:background ,br-blue :foreground ,term-bg))
		       (,256-class (:background ,256-br-blue :foreground ,256-term-bg))))
     `(popup-menu-face ((,tc-class (:background ,br-term-bg :foreground ,fg))
			(,256-class (:background ,256-br-term-bg :foreground ,256-fg))))
     `(popup-menu-selection-face ((,tc-class (:background ,br-blue :foreground ,term-bg))
				  (,256-class (:background ,256-br-blue :foreground ,256-term-bg))))
     `(popup-menu-mouse-face ((,tc-class (:inherit highlight))
			      (,256-class (:inherit highlight))))
     `(popup-isearch-match ((,tc-class (:inherit match))
			    (,256-class (:inherit match))))
     `(popup-scroll-bar-foreground-face ((,tc-class (:background ,br-term-bg))
					 (,256-class (:background ,256-br-term-bg))))
     `(popup-scroll-bar-background-face ((,tc-class (:background ,br-term-bg))
					 (,256-class (:background ,256-br-term-bg))))

;;;;; mode-line
;;;;;; Powerline
     `(powerline-active1 ((,tc-class (:background ,br-term-bg :foreground ,fg))
			  (,256-class (:background ,256-br-term-bg :foreground ,256-fg))))
     `(powerline-active2 ((,tc-class (:foreground ,fg :background ,gray1))
			  (,256-class (:foreground ,256-fg :background ,256-gray1))))
     `(powerline-inactive1 ((,tc-class (:background ,gray1 :foreground ,term-fg))
			    (,256-class (:background ,256-gray1 :foreground ,256-term-fg))))
     `(powerline-inactive2 ((,tc-class (:background ,gray1 :foreground ,term-fg))
			    (,256-class (:background ,256-gray1 :foreground ,256-term-fg))))
;;;;;; Mode line
     `(mode-line ((,tc-class (:foreground ,term-fg :background ,gray1))
		  (,256-class (:foreground ,256-term-fg :background ,256-gray1))))
     `(mode-line-inactive ((,tc-class (:foreground ,term-fg :background ,gray1))
			   (,256-class (:foreground ,256-term-fg :background ,256-gray1))))
     `(mode-line-buffer-id ((,tc-class (:foreground ,yellow))
			    (,256-class (:foreground ,256-yellow))))
     `(mode-line-highlight ((,tc-class (:background ,term-bg :box (:color ,magenta :line-width 1)))
			    (,256-class (:background ,256-term-bg :box (:color ,256-magenta :line-width 1)))))
     `(mode-line-buffer-id-inactive ((,tc-class (:foreground ,fg))
				     (,256-class (:foreground ,256-fg))))
     `(magit-mode-line-process ((,tc-class (:foreground ,blue))
				(,256-class (:foreground ,256-blue))))
     `(mode-line-emphasis ((,tc-class (:weight bold :foreground ,yellow))
			   (,256-class (:weight bold :foreground ,256-yellow))))
;;;;;; Spaceline
     `(spaceline-python-venv ((,tc-class (:foreground ,green))
			      (,256-class (:foreground ,256-green))))
     `(spaceline-flycheck-error ((,tc-class (:foreground ,red))
				 (,256-class (:foreground ,256-red))))
     `(spaceline-flycheck-info ((,tc-class (:foreground ,fg))
				(,256-class (:foreground ,256-fg))))
     `(spaceline-flycheck-warning ((,tc-class (:foreground ,br-orange))
				   (,256-class (:foreground ,256-br-orange))))
     `(spaceline-evil-normal ((,tc-class (:background ,br-term-bg :foreground ,fg))
			      (,256-class (:background ,256-br-term-bg :foreground ,256-fg))))
     `(spaceline-evil-insert ((,tc-class (:background ,fg :foreground ,term-bg))
			      (,256-class (:background ,256-fg :foreground ,256-term-bg))))
     `(spaceline-evil-replace ((,tc-class (:background ,br-red :foreground ,fg))
			       (,256-class (:background ,256-br-red :foreground ,256-fg))))
     `(spaceline-evil-visual ((,tc-class (:background ,cyan :foreground ,term-bg))
			      (,256-class (:background ,256-cyan :foreground ,256-term-bg))))
     `(spaceline-evil-motion ((,tc-class (:background ,br-magenta :foreground ,term-bg))
			      (,256-class (:background ,256-br-magenta :foreground ,256-term-bg))))
     `(spaceline-evil-emacs ((,tc-class (:background ,orange :foreground ,fg))
			     (,256-class (:background ,256-orange :foreground ,256-fg))))
     `(spaceline-unmodified ((,tc-class (:foreground ,fg))
			     (,256-class (:foreground ,256-fg))))
     `(spaceline-modified ((,tc-class (:background ,br-orange :foreground ,term-bg))
			   (,256-class (:background ,256-br-orange :foreground ,256-term-bg))))
     `(spaceline-read-only ((,tc-class (:background ,gray1 :foreground ,orange))
			    (,256-class (:background ,256-gray1 :foreground ,256-orange))))
     `(spaceline-highlight-face ((,tc-class (:background ,yellow :foreground ,term-bg))
				 (,256-class (:background ,256-yellow :foreground ,256-term-bg))))

;;;;; rainbow-delimiters
     `(rainbow-delimiters-depth-1-face ((,tc-class :foreground ,fg)
					(,256-class :foreground ,256-fg)))
     `(rainbow-delimiters-depth-2-face ((,tc-class :foreground ,br-blue)
					(,256-class :foreground ,256-br-blue)))
     `(rainbow-delimiters-depth-3-face ((,tc-class :foreground ,fg)
					(,256-class :foreground ,256-fg)))
     `(rainbow-delimiters-depth-4-face ((,tc-class :foreground ,br-cyan)
					(,256-class :foreground ,256-br-cyan)))
     `(rainbow-delimiters-depth-5-face ((,tc-class :foreground ,br-green)
					(,256-class :foreground ,256-br-green)))
     `(rainbow-delimiters-depth-6-face ((,tc-class :foreground ,blue)
					(,256-class :foreground ,256-blue)))
     `(rainbow-delimiters-depth-7-face ((,tc-class :foreground ,green)
					(,256-class :foreground ,256-green)))
     `(rainbow-delimiters-depth-8-face ((,tc-class :foreground ,yellow)
					(,256-class :foreground ,256-yellow)))
     `(rainbow-delimiters-unmatched-face ((,tc-class :foreground ,red)
					  (,256-class :foreground ,256-red)))
     `(rainbow-delimiters-mismatched-face ((,tc-class :foreground ,br-red)
					   (,256-class :foreground ,256-br-red)))
     ;; `(rainbow-delimiters-unmatched-face ((,tc-class :foreground ,red :overline t :inhert bold)
     ;;  (,256-class :foreground ,256-red :overline t :inhert bold)))
     ;; `(rainbow-delimiters-mismatched-face ((,tc-class :foreground ,red :overline t :weight bold)
     ;; (,256-class :foreground ,256-red :overline t :weight bold)))

;;;;; sh
     `(sh-heredoc ((,tc-class (:foreground ,green :weight bold))
		   (,256-class (:foreground ,256-green :weight bold))))
     `(sh-quoted-exec ((,tc-class (:foreground ,orange))
		       (,256-class (:foreground ,256-orange))))

;;;;; shm
     `(shm-current-face ((,tc-class (:background ,green :foreground ,term-bg))
			 (,256-class (:background ,256-green :foreground ,256-term-bg))))
     `(shm-quarantine-face ((,tc-class (:background ,gray1))
			    (,256-class (:background ,256-gray1))))

;;;;; show-paren
     `(show-paren-match ((,tc-class (:foreground ,magenta :background ,gray1 :weight bold))
			 (,256-class (:foreground ,256-magenta :background ,256-gray1 :weight bold))))
     `(show-paren-mismatch ((,tc-class (:background ,red :foreground ,fg))
			    (,256-class (:background ,256-red :foreground ,256-fg))))

;;;;; paren-face
     `(parenthesis ((,tc-class (:foreground ,gray5))
		    (,256-class (:foreground ,256-gray5))))

;;;;; smartparens
     `(sp-pair-overlay-face ((,tc-class (:background ,magenta :foreground nil))
			     (,256-class (:background ,256-magenta :foreground nil))))
     `(sp-show-pair-match-face ((,tc-class (:foreground ,magenta :weight bold))
				(,256-class (:foreground ,256-magenta :weight bold))))
     `(sp-wrap-overlay-closing-pair ((,tc-class (:background ,magenta :foreground, br-yellow))
				     (,256-class (:background ,256-magenta :foreground ,256-br-yellow))))

;;;;; evil-snipe
     `(evil-snipe-first-match-face ((,tc-class (:foreground ,magenta :weight bold))
				    (,256-class (:foreground ,256-magenta :weight bold))))
     `(evil-snipe-matches-face ((,tc-class (:foreground ,magenta :weight bold))
				(,256-class (:foreground ,256-magenta :weight bold))))

;;;;; spacemacs
     `(spacemacs-normal-face ((,tc-class (:background ,br-term-bg :foreground ,fg))
			      (,256-class (:background ,256-br-term-bg :foreground ,256-fg))))
     `(spacemacs-insert-face ((,tc-class (:background ,fg :foreground ,term-bg))
			      (,256-class (:background ,256-fg :foreground ,256-term-bg))))
     `(spacemacs-replace-face ((,tc-class (:background ,br-red :foreground ,fg))
			       (,256-class (:background ,256-br-red :foreground ,256-fg))))
     `(spacemacs-visual-face ((,tc-class (:background ,br-cyan :foreground ,term-bg))
			      (,256-class (:background ,256-br-cyan :foreground ,256-term-bg))))
     `(spacemacs-motion-face ((,tc-class (:background ,magenta :foreground ,fg))
			      (,256-class (:background ,256-magenta :foreground ,256-fg))))
     `(spacemacs-emacs-face ((,tc-class (:background ,orange :foreground ,fg))
			     (,256-class (:background ,256-orange :foreground ,256-fg))))
     `(spacemacs-hybrid-face ((,tc-class (:background ,br-orange :foreground ,term-bg))
			      (,256-class (:background ,256-br-orange :foreground ,256-term-bg))))
     `(spacemacs-lisp-face ((,tc-class (:background ,green :foreground ,term-bg))
			    (,256-class (:background ,256-green :foreground ,256-term-bg))))
     `(spacemacs-evilified-face ((,tc-class (:background ,br-yellow :foreground ,term-bg))
				 (,256-class (:background ,256-br-yellow :foreground ,256-term-bg))))
     `(spacemacs-helm-navigation-ms-face ((,tc-class (:foreground ,fg :slant italic))
					  (,256-class (:foreground ,256-fg :slant italic))))
     `(spacemacs-helm-navigation-ts-face ((,tc-class (:foreground ,fg :slant italic))
					  (,256-class (:foreground ,256-fg :slant italic))))
     `(spacemacs-transient-state-title-face ((,tc-class (:background nil :foreground ,green :box nil :weight bold))
					     (,256-class (:background nil :foreground ,256-green :box nil :weight bold))))
     `(spacemacs-ido-navigation-ts-face ((,tc-class (:foreground ,yellow))
					 (,256-class (:foreground ,256-yellow))))
     `(spacemacs-iedit-face ((,tc-class (:background ,blue :foreground ,fg))
			     (,256-class (:background ,256-blue :foreground ,256-fg))))
     `(spacemacs-iedit-insert-face ((,tc-class (:background ,br-blue :foreground ,term-bg))
				    (,256-class (:background ,256-br-blue :foreground ,256-term-bg))))
     `(spacemacs-micro-state-binding-face ((,tc-class (:foreground ,yellow :weight bold))
					   (,256-class (:foreground ,256-yellow :weight bold))))

;;;;; swiper
     `(swiper-line-face ((,tc-class (:background ,br-term-bg :weight bold))
			 (,256-class (:background ,256-br-term-bg :weight bold))))
     `(swiper-match-face-1 ((,tc-class (:weight bold))
			    (,256-class (:weight bold))))
     `(swiper-match-face-2 ((,tc-class (:foreground ,magenta :underline t))
			    (,256-class (:foreground ,256-magenta :underline t))))
     `(swiper-match-face-3 ((,tc-class (:foreground ,yellow :underline t))
			    (,256-class (:foreground ,256-yellow :underline t))))
     `(swiper-match-face-4 ((,tc-class (:foreground ,br-green :underline t))
			    (,256-class (:foreground ,256-br-green :underline t))))

;;;;; term
     `(term ((,tc-class (:foreground ,fg :background ,term-bg))
	     (,256-class (:foreground ,256-fg :background ,256-term-bg))))
     `(term-color-term-bg ((,tc-class (:foreground ,term-bg))
			   (,256-class (:foreground ,256-term-bg))))
     `(term-color-blue ((,tc-class (:foreground ,blue))
			(,256-class (:foreground ,256-blue))))
     `(term-color-cyan ((,tc-class (:foreground ,cyan))
			(,256-class (:foreground ,256-cyan))))
     `(term-color-green ((,tc-class (:foreground ,green))
			 (,256-class (:foreground ,256-green))))
     `(term-color-magenta ((,tc-class (:foreground ,magenta))
			   (,256-class (:foreground ,256-magenta))))
     `(term-color-red ((,tc-class (:foreground ,red))
		       (,256-class (:foreground ,256-red))))
     `(term-color-term-fg ((,tc-class (:foreground ,term-fg))
			   (,256-class (:foreground ,256-term-fg))))
     `(term-color-yellow ((,tc-class (:foreground ,yellow))
			  (,256-class (:foreground ,256-yellow))))

;;;;; web-mode
     `(web-mode-builtin-face ((,tc-class (:inherit ,font-lock-builtin-face))
			      (,256-class (:inherit ,font-lock-builtin-face))))
     `(web-mode-comment-face ((,tc-class (:inherit ,font-lock-comment-face))
			      (,256-class (:inherit ,font-lock-comment-face))))
     `(web-mode-constant-face ((,tc-class (:inherit ,font-lock-constant-face))
			       (,256-class (:inherit ,font-lock-constant-face))))
     `(web-mode-doctype-face ((,tc-class (:inherit ,font-lock-comment-face))
			      (,256-class (:inherit ,font-lock-comment-face))))
     `(web-mode-function-name-face ((,tc-class (:inherit ,font-lock-function-name-face))
				    (,256-class (:inherit ,font-lock-function-name-face))))
     `(web-mode-html-attr-name-face ((,tc-class (:foreground ,yellow))
				     (,256-class (:foreground ,256-yellow))))
     `(web-mode-html-attr-value-face ((,tc-class (:foreground ,br-green))
				      (,256-class (:foreground ,256-br-green))))
     `(web-mode-html-tag-face ((,tc-class (:foreground ,blue))
			       (,256-class (:foreground ,256-blue))))
     `(web-mode-html-tag-bracket-face ((,tc-class (:foreground ,gray5))
				       (,256-class (:foreground ,256-gray5))))
     `(web-mode-keyword-face ((,tc-class (:foreground ,red))
			      (,256-class (:foreground ,256-red))))
     `(web-mode-string-face ((,tc-class (:foreground ,br-green))
			     (,256-class (:foreground ,256-br-green))))
     `(web-mode-symbol-face ((,tc-class (:foreground ,br-blue))
			     (,256-class (:foreground ,256-br-blue))))
     `(web-mode-type-face ((,tc-class (:inherit ,font-lock-type-face))
			   (,256-class (:inherit ,font-lock-type-face))))
     `(web-mode-warning-face ((,tc-class (:inherit ,font-lock-warning-face))
			      (,256-class (:inherit ,font-lock-warning-face))))

;;;;; CSS
     `(css-selector ((,tc-class (:foreground ,blue))
		     (,256-class (:foreground ,256-blue))))
     `(css-property ((,tc-class (:foreground ,yellow))
		     (,256-class (:foreground ,256-yellow))))

;;;;; XML
     `(nxml-element-local-name ((,tc-class (:foreground ,blue))
				(,256-class (:foreground ,256-blue))))
     `(nxml-attribute-local-name ((,tc-class (:foreground ,yellow))
				  (,256-class (:foreground ,256-yellow))))

;;;;; which-key
     `(which-key-command-description-face ((,tc-class (:foreground ,fg))
					   (,256-class (:foreground ,256-fg))))
     `(which-key-group-description-face ((,tc-class (:foreground ,red))
					 (,256-class (:foreground ,256-red))))
     `(which-key-key-face ((,tc-class (:foreground ,yellow :weight bold))
			   (,256-class (:foreground ,256-yellow :weight bold))))
     `(which-key-separator-face ((,tc-class (:background nil :foreground ,br-green))
				 (,256-class (:background nil :foreground ,256-br-green))))
     `(which-key-special-key-face ((,tc-class (:background ,yellow :foreground ,term-bg))
				   (,256-class (:background ,256-yellow :foreground ,256-term-bg))))

;;;;; which-function-mode
     `(which-func ((,tc-class (:foreground ,yellow))
		   (,256-class (:foreground ,256-yellow))))

;;;;; term-fgspace-mode
     `(term-fgspace-empty ((,tc-class (:background nil :foreground ,yellow))
			   (,256-class (:background nil :foreground ,256-yellow))))
     `(term-fgspace-indentation ((,tc-class (:background nil :foreground ,br-orange))
				 (,256-class (:background nil :foreground ,256-br-orange))))
     `(term-fgspace-line ((,tc-class (:background nil :foreground ,green))
			  (,256-class (:background nil :foreground ,256-green))))
     `(term-fgspace-newline ((,tc-class (:background nil :foreground ,green))
			     (,256-class (:background nil :foreground ,256-green))))
     `(term-fgspace-space ((,tc-class (:background nil :foreground ,br-term-bg))
			   (,256-class (:background nil :foreground ,256-br-term-bg))))
     `(term-fgspace-space-after-tab ((,tc-class (:background nil :foreground ,yellow))
				     (,256-class (:background nil :foreground ,256-yellow))))
     `(term-fgspace-space-before-tab ((,tc-class (:background nil :foreground ,yellow))
				      (,256-class (:background nil :foreground ,256-yellow))))
     `(term-fgspace-tab ((,tc-class (:background nil))
			 (,256-class (:background nil))))
     `(term-fgspace-trailing ((,tc-class (:background ,red :foreground ,br-orange))
			      (,256-class (:background ,256-red :foreground ,256-br-orange))))

;;;;; ctbl
     `(ctbl:face-cell-select ((,tc-class (:foreground ,term-bg :background ,br-magenta))
			      (,256-class (:foreground ,256-term-bg :background ,256-br-magenta))))
     `(ctbl:face-continue-bar ((,tc-class (:foreground ,term-bg :background ,br-yellow))
			       (,256-class (:foreground ,256-term-bg :background ,256-br-yellow))))
     `(ctbl:face-row-select ((,tc-class (:foreground ,term-bg :background ,br-blue))
			     (,256-class (:foreground ,256-term-bg :background ,256-br-blue))))

;;;;; hlt
     `(hlt-property-highlight ((,tc-class (:foreground ,term-bg :background ,yellow))
			       (,256-class (:foreground ,256-term-bg :background ,256-yellow))))
     `(hlt-regexp-level-1 ((,tc-class (:foreground ,term-bg :background ,br-magenta))
			   (,256-class (:foreground ,256-term-bg :background ,256-br-magenta))))
     `(hlt-regexp-level-2 ((,tc-class (:foreground ,term-bg :background ,br-green))
			   (,256-class (:foreground ,256-term-bg :background ,256-br-green))))
     `(hlt-regexp-level-3 ((,tc-class (:foreground ,term-bg :background ,magenta))
			   (,256-class (:foreground ,256-term-bg :background ,256-magenta))))
     `(hlt-regexp-level-4 ((,tc-class (:foreground ,term-bg :background ,br-yellow))
			   (,256-class (:foreground ,256-term-bg :background ,256-br-yellow))))
     `(hlt-regexp-level-5 ((,tc-class (:foreground ,term-bg :background ,green))
			   (,256-class (:foreground ,256-term-bg :background ,256-green))))
     `(hlt-regexp-level-6 ((,tc-class (:foreground ,term-bg :background ,br-blue))
			   (,256-class (:foreground ,256-term-bg :background ,256-br-blue))))
     `(hlt-regexp-level-7 ((,tc-class (:foreground ,term-bg :background ,cyan))
			   (,256-class (:foreground ,256-term-bg :background ,256-cyan))))
     `(hlt-regexp-level-8 ((,tc-class (:foreground ,term-bg :background ,blue))
			   (,256-class (:foreground ,256-term-bg :background ,256-blue))))

;;;;; reb
     `(reb-match-0 ((,tc-class (:foreground ,term-bg :background ,br-blue))
		    (,256-class (:foreground ,256-term-bg :background ,256-br-blue))))
     `(reb-match-1 ((,tc-class (:foreground ,term-bg :background ,br-cyan))
		    (,256-class (:foreground ,256-term-bg :background ,256-br-cyan))))
     `(reb-match-2 ((,tc-class (:foreground ,term-bg :background ,green))
		    (,256-class (:foreground ,256-term-bg :background ,256-green))))
     `(reb-match-3 ((,tc-class (:foreground ,term-bg :background ,yellow))
		    (,256-class (:foreground ,256-term-bg :background ,256-yellow))))

;;;;; other, need more work
     `(ac-completion-face ((,tc-class (:underline t :foreground ,red))
			   (,256-class (:underline t :foreground ,256-red))))
     `(epc:face-title ((,tc-class :foreground ,blue :weight bold)
		       (,256-class :foreground ,256-blue :weight bold)))
     `(ffap ((,tc-class (:foreground ,fg))
	     (,256-class (:foreground ,256-fg))))
     `(flx-highlight-face ((,tc-class (:foreground ,green :underline nil))
			   (,256-class (:foreground ,256-green :underline nil))))
     `(icompletep-determined ((,tc-class :foreground ,red)
			      (,256-class :foreground ,256-red)))
     `(js2-external-variable ((,tc-class (:foreground ,green))
			      (,256-class (:foreground ,256-green))))
     `(js2-function-param ((,tc-class (:foreground ,br-magenta))
			   (,256-class (:foreground ,256-br-magenta))))
     `(js2-jsdoc-html-tag-delimiter ((,tc-class (:foreground ,br-green))
				     (,256-class (:foreground ,256-br-green))))
     `(js2-jsdoc-html-tag-name ((,tc-class (:foreground ,red))
				(,256-class (:foreground ,256-red))))
     `(js2-jsdoc-value ((,tc-class (:foreground ,br-green))
			(,256-class (:foreground ,256-br-green))))
     `(js2-private-function-call ((,tc-class (:foreground ,br-magenta))
				  (,256-class (:foreground ,256-br-magenta))))
     `(js2-private-member ((,tc-class (:foreground ,fg))
			   (,256-class (:foreground ,256-fg))))
     `(js2-object-property ((,tc-class (:foreground ,blue))
			    (,256-class (:foreground ,256-blue))))
     `(js3-error-face ((,tc-class (:underline ,br-orange))
		       (,256-class (:underline ,256-br-orange))))
     `(js3-external-variable-face ((,tc-class (:foreground ,blue))
				   (,256-class (:foreground ,256-blue))))
     `(js3-function-param-face ((,tc-class (:foreground ,red))
				(,256-class (:foreground ,256-red))))
     `(js3-instance-member-face ((,tc-class (:foreground ,br-magenta))
				 (,256-class (:foreground ,256-br-magenta))))
     `(js3-jsdoc-tag-face ((,tc-class (:foreground ,red))
			   (,256-class (:foreground ,256-red))))
     `(js3-warning-face ((,tc-class (:underline ,red))
			 (,256-class (:underline ,256-red))))
     `(slime-repl-inputed-output-face ((,tc-class (:foreground ,green))
				       (,256-class (:foreground ,256-green))))
     `(trailing-term-fgspace ((,tc-class :foreground nil :background ,red)
			      (,256-class :foreground nil :background ,256-red)))
     `(undo-tree-visualizer-current-face ((,tc-class :foreground ,red)
					  (,256-class :foreground ,256-red)))
     `(undo-tree-visualizer-default-face ((,tc-class :foreground ,fg)
					  (,256-class :foreground ,256-fg)))
     `(undo-tree-visualizer-register-face ((,tc-class :foreground ,green)
					   (,256-class :foreground ,256-green)))
     `(undo-tree-visualizer-unmodified-face ((,tc-class :foreground ,blue)
					     (,256-class :foreground ,256-blue)))
     `(undo-tree-visualizer-active-branch-face ((,tc-class :foreground ,br-magenta)
						(,256-class :foreground ,256-br-magenta)))
     `(persp-face-lighter-buffer-not-in-persp ((,tc-class :background ,red :foreground ,fg)
					       (,256-class :background ,256-red :foreground ,256-fg)))
     `(pulse-highlight-face ((,tc-class :background ,green :foreground ,term-bg)
			     (,256-class :background ,256-green :foreground ,256-term-bg)))
     `(pulse-highlight-start-face ((,tc-class :background ,br-green :foreground ,term-bg)
				   (,256-class :background ,256-br-green :foreground ,256-term-bg)))
     `(custom-invalid ((,tc-class :background ,br-red :foreground ,fg)
		       (,256-class :background ,256-br-red :foreground ,256-fg)))
     `(holiday ((,tc-class :background ,br-magenta :foreground ,fg)
		(,256-class :background ,256-br-magenta :foreground ,256-fg)))
     `(term-fgspace-trailing ((,tc-class :background ,red :foreground ,fg)
			      (,256-class :background ,256-red :foreground ,256-fg)))
     `(term-fgspace-big-indent ((,tc-class :background ,br-red :foreground ,fg)
				(,256-class :background ,256-br-red :foreground ,256-fg)))
     `(term-fgspace-hspace ((,tc-class :background ,br-blue :foreground ,fg)
			    (,256-class :background ,256-br-blue :foreground ,256-fg)))

;;;;; Slack
     `(lui-button-face ((,tc-class :foreground ,blue)
			(,256-class :foreground ,256-blue)))
     `(lui-highlight-face ((,tc-class :foreground ,magenta)
			   (,256-class :foreground ,256-magenta)))
     `(lui-time-stamp-face ((,tc-class :foreground ,term-fg)
			    (,256-class :foreground ,256-term-fg)))
     `(slack-profile-image-face ((,tc-class :background ,fg :foreground ,term-bg)
				 (,256-class :background ,256-fg :foreground ,256-term-bg)))
     `(slack-preview-face ((,tc-class :foreground ,cyan)
			   (,256-class :foreground ,256-cyan)))
     `(slack-message-output-header ((,tc-class :foreground ,yellow :weight bold)
				    (,256-class :foreground ,256-yellow :weight bold)))

;;;;; Message
     `(message-header-cc ((,tc-class :foreground ,blue)
			  (,256-class :foreground ,256-blue)))
     `(message-header-newsgroups ((,tc-class :foreground ,blue)
				  (,256-class :foreground ,256-blue)))
     `(message-header-subject ((,tc-class :foreground ,blue)
			       (,256-class :foreground ,256-blue)))
     `(message-header-to ((,tc-class :foreground ,blue)
			  (,256-class :foreground ,256-blue)))

;;;;; Alert
     `(alert-low-face ((,tc-class :foreground ,blue :weight bold)
		       (,256-class :foreground ,256-blue :weight bold)))
     `(alert-moderate-face ((,tc-class :foreground ,yellow :weight bold)
			    (,256-class :foreground ,256-yellow :weight bold)))

;;;;; Custom
     `(custom-comment-tag ((,tc-class :foreground ,blue)
			   (,256-class :foreground ,256-blue)))
     `(custom-face-tag ((,tc-class :foreground ,blue :weight bold)
			(,256-class :foreground ,256-blue :weight bold)))
     `(custom-group-tag ((,tc-class :foreground ,blue)
			 (,256-class :foreground ,256-blue)))
     `(custom-state ((,tc-class :foreground ,green)
		     (,256-class :foreground ,256-green)))
     `(custom-set ((,tc-class :background ,br-blue :foreground ,term-bg)
		   (,256-class :background ,256-br-blue :foreground ,256-term-bg)))
     `(custom-modified ((,tc-class :background ,blue :foreground ,fg)
			(,256-class :background ,256-blue :foreground ,256-fg)))
     `(custom-themed ((,tc-class :background ,blue :foreground ,term-bg)
		      (,256-class :background ,256-blue :foreground ,256-term-bg)))
     `(custom-variable-tag ((,tc-class :foreground ,blue)
			    (,256-class :foreground ,256-blue)))
     `(custom-changed ((,tc-class :background ,blue :foreground ,term-bg)
		       (,256-class :background ,256-blue :foreground ,256-term-bg)))
     `(custom-comment ((,tc-class :background ,term-fg :foreground ,term-bg)
		       (,256-class :background ,256-term-fg :foreground ,256-term-bg)))

;;;;; LSP
     `(lsp-ui-sideline-global ((,tc-class :foreground ,gray5)
			       (,256-class :foreground ,256-gray5)))

;;;;; widget
     `(widget-field ((,tc-class :background ,gray2 :foreground ,fg)
		     (,256-class :background ,256-gray2 :foreground ,256-fg)))
     `(widget-documentation ((,tc-class :foreground ,green)
			     (,256-class :foreground ,256-green)))
     `(widget-button ((,tc-class (:foreground ,br-term-fg :underline nil))
		      (,256-class (:foreground ,256-br-term-fg :underline nil)))

;;;;; Misc
		     `(epa-string ((,tc-class :foreground ,blue)
				   (,256-class :foreground ,256-blue)))
		     `(imenu-list-entry-face-0 ((,tc-class :foreground ,magenta)
						(,256-class :foreground ,256-magenta)))
		     `(imenu-list-entry-face-1 ((,tc-class :foreground ,green)
						(,256-class :foreground ,256-green)))
		     `(imenu-list-entry-face-2 ((,tc-class :foreground ,blue)
						(,256-class :foreground ,256-blue)))
		     `(imenu-list-entry-face-3 ((,tc-class :foreground ,blue)
						(,256-class :foreground ,256-blue)))

;;;;; mmm
		     `(mmm-default-submode-face ((,tc-class :background ,bg)
						 (,256-class :background ,256-bg)))

;;;;; Dashboard
		     `(dashboard-heading ((,tc-class :inherit org-level-1)
					  (,256-class :inherit org-level-1))))

     )

    (custom-theme-set-variables
     theme-name
;;;;; ansi-color-names
     `(ansi-color-names-vector [,bg ,red ,green ,yellow ,blue ,magenta ,cyan ,fg])
;;;;; hl-todo
     `(hl-todo-keyword-faces '(("TODO"        . ,orange)
			       ("NEXT"        . ,orange)
			       ("THEM"        . ,aqua)
			       ("PROG"        . ,blue)
			       ("OKAY"        . ,blue)
			       ("DONT"        . ,red)
			       ("FAIL"        . ,red)
			       ("DONE"        . ,green)
			       ("NOTE"        . ,yellow)
			       ("KLUDGE"      . ,yellow)
			       ("HACK"        . ,yellow)
			       ("TEMP"        . ,yellow)
			       ("FIXME"       . ,orange)
			       ("XXX+"        . ,orange)
			       ("\\?\\?\\?+"  . ,orange)))
;;;;; pdf-tools
     `(pdf-view-midnight-colors '(,fg . ,bg)))
    ))


;;;###autoload
(add-to-list 'custom-theme-load-path
	     (file-name-directory load-file-name))

;;;###autoload
(defun acario-themes-load-style (style)
  "Load Acario theme variant STYLE.

Argument STYLE can be either 'light or 'dark."

  (interactive)
  (cond ((equal style 'light)
	 (load-theme 'acario-light t))
	((equal style 'dark)
	 (load-theme 'acario-dark t))

	(t (error (format "Unknown Acario theme style: %S" style)))))

;;;###autoload
(defun acario-themes-switch-style ()
  "Toggle between the light and dark style of Acario theme."
  (interactive)
  (cond ((or (null acario-themes-current-style)
	     (equal acario-themes-current-style 'dark))
	 (acario-themes-load-style 'light)
	 (setq acario-themes-current-style 'light))
	((equal acario-themes-current-style 'light)
	 (acario-themes-load-style 'dark)
	 (setq acario-themes-current-style 'dark))
	(t (error (format "Invalid Acario current style: %S"
			  acario-themes-current-style)))))

(provide 'acario-themes)

;;; acario-themes.el ends here

